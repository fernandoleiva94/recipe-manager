<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/controller/RecipeController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/controller/RecipeController.java" />
              <option name="originalContent" value="package com.sevenb.recipes_manager.controller;&#10;&#10;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeOuputDto;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeInputDto;&#10;import com.sevenb.recipes_manager.dto.recipe.ProductionRequestDto;&#10;&#10;import com.sevenb.recipes_manager.entity.RecipeProduction;&#10;import com.sevenb.recipes_manager.service.CloudinaryService;&#10;import com.sevenb.recipes_manager.service.RecipeService;&#10;import com.sevenb.recipes_manager.service.RecipeProductionService;&#10;&#10;import com.sevenb.recipes_manager.util.JwtUtil;&#10;import lombok.RequiredArgsConstructor;&#10;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.http.ResponseEntity;&#10;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.web.multipart.MultipartFile;&#10;&#10;import java.io.IOException;&#10;import java.util.Base64;&#10;import java.util.List;&#10;import java.util.Objects;&#10;import java.util.Set;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/recipes&quot;)&#10;@RequiredArgsConstructor&#10;public class RecipeController {&#10;&#10;    private final RecipeService recipeService;&#10;    private final JwtUtil jwtUtil;&#10;    private final CloudinaryService cloudinaryService;&#10;    private final RecipeProductionService recipeProductionService;&#10;&#10;    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)&#10;    public ResponseEntity&lt;RecipeOuputDto&gt; createRecipe(@RequestHeader(&quot;Authorization&quot;) String authHeader,&#10;                                               @RequestBody RecipeInputDto recipeInputDto) throws IOException {&#10;&#10;&#10;        if (recipeInputDto.getImageBase64() != null &amp;&amp; !recipeInputDto.getImageBase64().isEmpty()) {&#10;            byte[] imageBytes = Base64.getDecoder().decode(recipeInputDto.getImageBase64());&#10;            String url = cloudinaryService.upload(imageBytes);&#10;            recipeInputDto.setImageUrl(url);&#10;        }&#10;&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;        recipeInputDto.setUserId(userId);&#10;&#10;        RecipeOuputDto savedRecipe = recipeService.createRecipe(recipeInputDto);&#10;        return ResponseEntity.status(HttpStatus.CREATED).body(savedRecipe);&#10;    }&#10;&#10;    @GetMapping&#10;    public Set&lt;RecipeOuputDto&gt; getAllRecipes(@RequestHeader(&quot;Authorization&quot;) String authHeader) {&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;&#10;        return recipeService.getAllRecipes(userId);&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;RecipeOuputDto&gt; getRecipeById(@PathVariable Long id) {&#10;        RecipeOuputDto recipe = recipeService.getRecipeById(id);&#10;        if (Objects.nonNull(recipe))&#10;            return ResponseEntity.ok(recipe);&#10;        else&#10;            return ResponseEntity.notFound().build();&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteRecipe(@PathVariable Long id) {&#10;        recipeService.deleteRecipe(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;RecipeOuputDto&gt; updateRecipe(@RequestBody RecipeInputDto recipe,&#10;                                                       @PathVariable Long id) throws IOException {&#10;&#10;        if (recipe.getImageBase64() != null &amp;&amp; !recipe.getImageBase64().isEmpty()) {&#10;            byte[] imageBytes = Base64.getDecoder().decode(recipe.getImageBase64());&#10;            String url = cloudinaryService.upload(imageBytes);&#10;            recipe.setImageUrl(url);&#10;        }&#10;        if (Boolean.TRUE.equals(recipe.getDeleteImage())) {&#10;            recipe.setImageUrl(null);&#10;        }&#10;&#10;&#10;        RecipeOuputDto savedRecipe = recipeService.updateRecipe(recipe,id);&#10;        return ResponseEntity.status(HttpStatus.CREATED).body(savedRecipe);&#10;    }&#10;&#10;    // --- Endpoints de producciÃ³n de recetas ---&#10;    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, value = &quot;/production&quot;)&#10;    public ResponseEntity&lt;RecipeProductionDto&gt; registerProduction(&#10;            @RequestHeader(&quot;Authorization&quot;) String authHeader,&#10;            @RequestBody ProductionRequestDto productionRequestDto) {&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;        RecipeProduction production = recipeProductionService.registerProduction(productionRequestDto, userId);&#10;        RecipeProductionDto dto = recipeProductionService.toDto(production);&#10;        return ResponseEntity.status(HttpStatus.CREATED).body(dto);&#10;    }&#10;&#10;    @GetMapping(&quot;/production&quot;)&#10;    public ResponseEntity&lt;List&lt;RecipeProductionDto&gt;&gt; getAllProductionsByUser(@RequestHeader(&quot;Authorization&quot;) String authHeader) {&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;        List&lt;RecipeProductionDto&gt; productions = recipeProductionService.getAllProductionsByUserDto(userId);&#10;        return ResponseEntity.ok(productions);&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.sevenb.recipes_manager.controller;&#10;&#10;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeOuputDto;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeInputDto;&#10;import com.sevenb.recipes_manager.dto.recipe.ProductionRequestDto;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeProductionDto;&#10;&#10;import com.sevenb.recipes_manager.entity.RecipeProduction;&#10;import com.sevenb.recipes_manager.service.CloudinaryService;&#10;import com.sevenb.recipes_manager.service.RecipeService;&#10;import com.sevenb.recipes_manager.service.RecipeProductionService;&#10;&#10;import com.sevenb.recipes_manager.util.JwtUtil;&#10;import lombok.RequiredArgsConstructor;&#10;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.http.ResponseEntity;&#10;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.web.multipart.MultipartFile;&#10;&#10;import java.io.IOException;&#10;import java.util.Base64;&#10;import java.util.List;&#10;import java.util.Objects;&#10;import java.util.Set;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/recipes&quot;)&#10;@RequiredArgsConstructor&#10;public class RecipeController {&#10;&#10;    private final RecipeService recipeService;&#10;    private final JwtUtil jwtUtil;&#10;    private final CloudinaryService cloudinaryService;&#10;    private final RecipeProductionService recipeProductionService;&#10;&#10;    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)&#10;    public ResponseEntity&lt;RecipeOuputDto&gt; createRecipe(@RequestHeader(&quot;Authorization&quot;) String authHeader,&#10;                                               @RequestBody RecipeInputDto recipeInputDto) throws IOException {&#10;&#10;&#10;        if (recipeInputDto.getImageBase64() != null &amp;&amp; !recipeInputDto.getImageBase64().isEmpty()) {&#10;            byte[] imageBytes = Base64.getDecoder().decode(recipeInputDto.getImageBase64());&#10;            String url = cloudinaryService.upload(imageBytes);&#10;            recipeInputDto.setImageUrl(url);&#10;        }&#10;&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;        recipeInputDto.setUserId(userId);&#10;&#10;        RecipeOuputDto savedRecipe = recipeService.createRecipe(recipeInputDto);&#10;        return ResponseEntity.status(HttpStatus.CREATED).body(savedRecipe);&#10;    }&#10;&#10;    @GetMapping&#10;    public Set&lt;RecipeOuputDto&gt; getAllRecipes(@RequestHeader(&quot;Authorization&quot;) String authHeader) {&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;&#10;        return recipeService.getAllRecipes(userId);&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;RecipeOuputDto&gt; getRecipeById(@PathVariable Long id) {&#10;        RecipeOuputDto recipe = recipeService.getRecipeById(id);&#10;        if (Objects.nonNull(recipe))&#10;            return ResponseEntity.ok(recipe);&#10;        else&#10;            return ResponseEntity.notFound().build();&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteRecipe(@PathVariable Long id) {&#10;        recipeService.deleteRecipe(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;RecipeOuputDto&gt; updateRecipe(@RequestBody RecipeInputDto recipe,&#10;                                                       @PathVariable Long id) throws IOException {&#10;&#10;        if (recipe.getImageBase64() != null &amp;&amp; !recipe.getImageBase64().isEmpty()) {&#10;            byte[] imageBytes = Base64.getDecoder().decode(recipe.getImageBase64());&#10;            String url = cloudinaryService.upload(imageBytes);&#10;            recipe.setImageUrl(url);&#10;        }&#10;        if (Boolean.TRUE.equals(recipe.getDeleteImage())) {&#10;            recipe.setImageUrl(null);&#10;        }&#10;&#10;&#10;        RecipeOuputDto savedRecipe = recipeService.updateRecipe(recipe,id);&#10;        return ResponseEntity.status(HttpStatus.CREATED).body(savedRecipe);&#10;    }&#10;&#10;    // --- Endpoints de producciÃ³n de recetas ---&#10;    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, value = &quot;/production&quot;)&#10;    public ResponseEntity&lt;RecipeProductionDto&gt; registerProduction(&#10;            @RequestHeader(&quot;Authorization&quot;) String authHeader,&#10;            @RequestBody ProductionRequestDto productionRequestDto) {&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;        RecipeProduction production = recipeProductionService.registerProduction(productionRequestDto, userId);&#10;        RecipeProductionDto dto = recipeProductionService.toDto(production);&#10;        return ResponseEntity.status(HttpStatus.CREATED).body(dto);&#10;    }&#10;&#10;    @GetMapping(&quot;/production&quot;)&#10;    public ResponseEntity&lt;List&lt;RecipeProductionDto&gt;&gt; getAllProductionsByUser(@RequestHeader(&quot;Authorization&quot;) String authHeader) {&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;        List&lt;RecipeProductionDto&gt; productions = recipeProductionService.getAllProductionsByUserDto(userId);&#10;        return ResponseEntity.ok(productions);&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/controller/RecipeProductionController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/controller/RecipeProductionController.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/dto/recipe/ProductionRequestDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/dto/recipe/ProductionRequestDto.java" />
              <option name="updatedContent" value="package com.sevenb.recipes_manager.dto.recipe;&#10;&#10;import lombok.Data;&#10;&#10;@Data&#10;public class ProductionRequestDto {&#10;    private Long recipeId;&#10;    private Double quantityProduced;&#10;    private Double expectedQuantity;&#10;    private Double cost;&#10;    private String notes;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/dto/recipe/RecipeProductionDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/dto/recipe/RecipeProductionDto.java" />
              <option name="updatedContent" value="package com.sevenb.recipes_manager.dto.recipe;&#10;&#10;import lombok.Data;&#10;import java.time.LocalDateTime;&#10;&#10;@Data&#10;public class RecipeProductionDto {&#10;    private Long id;&#10;    private Long recipeId;&#10;    private String recipeName;&#10;    private Double quantityProduced;&#10;    private String unit;&#10;    private LocalDateTime productionDate;&#10;    private Double expectedQuantity;&#10;    private Double yield;&#10;    private Double cost;&#10;    private String notes;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/entity/RecipeProduction.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/entity/RecipeProduction.java" />
              <option name="updatedContent" value="package com.sevenb.recipes_manager.entity;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;import java.time.LocalDateTime;&#10;&#10;@Entity&#10;@Table(name = &quot;recipe_production&quot;)&#10;@Getter&#10;@Setter&#10;public class RecipeProduction {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @ManyToOne(optional = false)&#10;    @JoinColumn(name = &quot;recipe_id&quot;)&#10;    private Recipe recipe;&#10;&#10;    private Double quantityProduced;&#10;    private String unit;&#10;    private LocalDateTime productionDate;&#10;    private Long userId;&#10;    private Double expectedQuantity; // cantidad teÃ³rica segÃºn receta&#10;    private Double yield; // rendimiento real (quantityProduced / expectedQuantity)&#10;    private Double cost; // costo real de la producciÃ³n&#10;    private String notes; // observaciones, mermas, etc.&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/repository/RecipeProductionRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/repository/RecipeProductionRepository.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.sevenb.recipes_manager.repository;&#10;&#10;import com.sevenb.recipes_manager.entity.RecipeProduction;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface RecipeProductionRepository extends JpaRepository&lt;RecipeProduction, Long&gt; {&#10;    List&lt;RecipeProduction&gt; findAllByUserId(Long userId);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/service/RecipeProductionService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/service/RecipeProductionService.java" />
              <option name="originalContent" value="package com.sevenb.recipes_manager.service;&#10;&#10;import com.sevenb.recipes_manager.dto.recipe.ProductionRequestDto;&#10;import com.sevenb.recipes_manager.entity.Recipe;&#10;import com.sevenb.recipes_manager.entity.RecipeProduction;&#10;import com.sevenb.recipes_manager.repository.RecipeProductionRepository;&#10;import com.sevenb.recipes_manager.repository.RecipeRepository;&#10;import jakarta.transaction.Transactional;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;@Service&#10;public class RecipeProductionService {&#10;    private final RecipeProductionRepository recipeProductionRepository;&#10;    private final RecipeRepository recipeRepository;&#10;&#10;    public RecipeProductionService(RecipeProductionRepository recipeProductionRepository, RecipeRepository recipeRepository) {&#10;        this.recipeProductionRepository = recipeProductionRepository;&#10;        this.recipeRepository = recipeRepository;&#10;    }&#10;&#10;    @Transactional&#10;    public RecipeProduction registerProduction(ProductionRequestDto dto, Long userId) {&#10;        Recipe recipe = recipeRepository.findById(dto.getRecipeId())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Recipe not found&quot;));&#10;        RecipeProduction production = new RecipeProduction();&#10;        production.setRecipe(recipe);&#10;        production.setQuantityProduced(dto.getQuantityProduced());&#10;        production.setUnit(recipe.getUnit());&#10;        production.setProductionDate(LocalDateTime.now());&#10;        production.setUserId(userId);&#10;        production.setExpectedQuantity(dto.getExpectedQuantity());&#10;        production.setYield(dto.getExpectedQuantity() != null &amp;&amp; dto.getExpectedQuantity() &gt; 0 ? dto.getQuantityProduced() / dto.getExpectedQuantity() : null);&#10;        production.setCost(dto.getCost());&#10;        production.setNotes(dto.getNotes());&#10;        return recipeProductionRepository.save(production);&#10;    }&#10;&#10;    public List&lt;RecipeProduction&gt; getAllProductionsByUser(Long userId) {&#10;        return recipeProductionRepository.findAllByUserId(userId);&#10;    }&#10;&#10;    public RecipeProductionDto toDto(RecipeProduction production) {&#10;        RecipeProductionDto dto = new RecipeProductionDto();&#10;        dto.setId(production.getId());&#10;        dto.setRecipeId(production.getRecipe().getId());&#10;        dto.setRecipeName(production.getRecipe().getName());&#10;        dto.setQuantityProduced(production.getQuantityProduced());&#10;        dto.setUnit(production.getUnit());&#10;        dto.setProductionDate(production.getProductionDate());&#10;        dto.setExpectedQuantity(production.getExpectedQuantity());&#10;        dto.setYield(production.getYield());&#10;        dto.setCost(production.getCost());&#10;        dto.setNotes(production.getNotes());&#10;        return dto;&#10;    }&#10;&#10;    public List&lt;RecipeProductionDto&gt; getAllProductionsByUserDto(Long userId) {&#10;        return recipeProductionRepository.findAllByUserId(userId)&#10;                .stream()&#10;                .map(this::toDto)&#10;                .toList();&#10;    }&#10;&#10;    // Puedes agregar mÃ¡s mÃ©todos para filtrar por receta, usuario, fechas, etc.&#10;}&#10;" />
              <option name="updatedContent" value="package com.sevenb.recipes_manager.service;&#10;&#10;import com.sevenb.recipes_manager.dto.recipe.ProductionRequestDto;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeProductionDto;&#10;import com.sevenb.recipes_manager.entity.Recipe;&#10;import com.sevenb.recipes_manager.entity.RecipeProduction;&#10;import com.sevenb.recipes_manager.repository.RecipeProductionRepository;&#10;import com.sevenb.recipes_manager.repository.RecipeRepository;&#10;import jakarta.transaction.Transactional;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;@Service&#10;public class RecipeProductionService {&#10;    private final RecipeProductionRepository recipeProductionRepository;&#10;    private final RecipeRepository recipeRepository;&#10;&#10;    public RecipeProductionService(RecipeProductionRepository recipeProductionRepository, RecipeRepository recipeRepository) {&#10;        this.recipeProductionRepository = recipeProductionRepository;&#10;        this.recipeRepository = recipeRepository;&#10;    }&#10;&#10;    @Transactional&#10;    public RecipeProduction registerProduction(ProductionRequestDto dto, Long userId) {&#10;        Recipe recipe = recipeRepository.findById(dto.getRecipeId())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Recipe not found&quot;));&#10;        RecipeProduction production = new RecipeProduction();&#10;        production.setRecipe(recipe);&#10;        production.setQuantityProduced(dto.getQuantityProduced());&#10;        production.setUnit(recipe.getUnit());&#10;        production.setProductionDate(LocalDateTime.now());&#10;        production.setUserId(userId);&#10;        production.setExpectedQuantity(dto.getExpectedQuantity());&#10;        production.setYield(dto.getExpectedQuantity() != null &amp;&amp; dto.getExpectedQuantity() &gt; 0 ? dto.getQuantityProduced() / dto.getExpectedQuantity() : null);&#10;        production.setCost(dto.getCost());&#10;        production.setNotes(dto.getNotes());&#10;        return recipeProductionRepository.save(production);&#10;    }&#10;&#10;    public List&lt;RecipeProduction&gt; getAllProductionsByUser(Long userId) {&#10;        return recipeProductionRepository.findAllByUserId(userId);&#10;    }&#10;&#10;    public RecipeProductionDto toDto(RecipeProduction production) {&#10;        RecipeProductionDto dto = new RecipeProductionDto();&#10;        dto.setId(production.getId());&#10;        dto.setRecipeId(production.getRecipe().getId());&#10;        dto.setRecipeName(production.getRecipe().getName());&#10;        dto.setQuantityProduced(production.getQuantityProduced());&#10;        dto.setUnit(production.getUnit());&#10;        dto.setProductionDate(production.getProductionDate());&#10;        dto.setExpectedQuantity(production.getExpectedQuantity());&#10;        dto.setYield(production.getYield());&#10;        dto.setCost(production.getCost());&#10;        dto.setNotes(production.getNotes());&#10;        return dto;&#10;    }&#10;&#10;    public List&lt;RecipeProductionDto&gt; getAllProductionsByUserDto(Long userId) {&#10;        return recipeProductionRepository.findAllByUserId(userId)&#10;                .stream()&#10;                .map(this::toDto)&#10;                .toList();&#10;    }&#10;&#10;    // Puedes agregar mÃ¡s mÃ©todos para filtrar por receta, usuario, fechas, etc.&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/service/RecipeService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/service/RecipeService.java" />
              <option name="originalContent" value="package com.sevenb.recipes_manager.service;&#10;&#10;&#10;import com.sevenb.recipes_manager.Exception.CannotDeleteSupplyException;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeInputDto;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeOuputDto;&#10;import com.sevenb.recipes_manager.dto.SupplyDto;&#10;import com.sevenb.recipes_manager.dto.recipe.SubRecipeOutputDto;&#10;import com.sevenb.recipes_manager.entity.*;&#10;import com.sevenb.recipes_manager.repository.*;&#10;import jakarta.transaction.Transactional;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.dao.DataIntegrityViolationException;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.text.DecimalFormat;&#10;import java.util.HashSet;&#10;import java.util.Locale;&#10;import java.util.Set;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;public class RecipeService {&#10;&#10;    @Autowired&#10;    private RecipeRepository recipeRepository;&#10;&#10;    @Autowired&#10;    private SupplyRepository supplyRepository;&#10;&#10;    @Autowired&#10;    private RecipeSupplyRepository recipeIngredientRepository;&#10;&#10;    @Autowired&#10;    private RecipeCategoryRepository categoryRepository;&#10;&#10;    @Transactional&#10;    public RecipeOuputDto createRecipe(RecipeInputDto recipeInputDto) {&#10;&#10;        Recipe recipe = new Recipe();&#10;        recipe.setDescription(recipeInputDto.getDescription());&#10;        recipe.setName(recipeInputDto.getName().toUpperCase(Locale.ROOT));&#10;        recipe.setQuantity(recipeInputDto.getQuantity());&#10;        recipe.setUnit(recipeInputDto.getUnit());&#10;        recipe.setCategory(categoryRepository.findById(recipeInputDto.getCategoryId()).orElseThrow());&#10;        recipe.setUserId(recipeInputDto.getUserId());&#10;        recipe.setImageUrl(recipeInputDto.getImageUrl());&#10;&#10;        recipeInputDto.getIngredients().forEach(recipeSupplyDto -&gt; {&#10;            SupplyEntity supplyEntity = supplyRepository&#10;                    .findById(recipeSupplyDto.getSupplyId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Supply id: &quot; + recipeSupplyDto.getSupplyId() + &quot; not found&quot;));&#10;            RecipeSupply recipeSupply = new RecipeSupply();&#10;            recipeSupply.setRecipe(recipe);&#10;            recipeSupply.setSupply(supplyEntity);&#10;            recipeSupply.setQuantity(recipeSupplyDto.getQuantity());&#10;            recipe.getRecipeSupplies().add(recipeSupply);&#10;        });&#10;&#10;        recipeInputDto.getRecipes().forEach(recipeRecipeDto -&gt; {&#10;            Recipe subRecipe = recipeRepository&#10;                    .findById(recipeRecipeDto.getRecipeId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Supply not found&quot;));&#10;            RecipeRecipeRelationEntity recipeRecipeRelation = new RecipeRecipeRelationEntity();&#10;&#10;            recipeRecipeRelation.setRecipe(recipe);&#10;            recipeRecipeRelation.setSubRecipe(subRecipe);&#10;            recipeRecipeRelation.setQuantity(recipeRecipeDto.getQuantity());&#10;            recipe.getRecipeRecipeRelations().add(recipeRecipeRelation);&#10;        });&#10;&#10;        return toRecipeDTO(recipeRepository.save(recipe));&#10;    }&#10;&#10;    public Set&lt;RecipeOuputDto&gt; getAllRecipes(Long userId) {&#10;        Set&lt;RecipeOuputDto&gt; recipeOuputDtos = new HashSet&lt;&gt;();&#10;        recipeRepository.findAllByUserId(userId).forEach(l&#10;                -&gt; recipeOuputDtos.add(toRecipeDTOBasic(l)));&#10;        return recipeOuputDtos;&#10;    }&#10;&#10;    public RecipeOuputDto getRecipeById(Long id) {&#10;        Recipe recipe = recipeRepository.findById(id).orElseThrow(() -&gt; new RuntimeException(&quot;Recipe not found&quot;));&#10;        return toRecipeDTO(recipe);&#10;    }&#10;&#10;    @Transactional&#10;    public RecipeOuputDto updateRecipe(RecipeInputDto recipeInputDto, Long id) {&#10;        Recipe recipe = recipeRepository.findById(id)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Recipe not found&quot;));&#10;        recipe.setName(recipeInputDto.getName().toUpperCase(Locale.ROOT));&#10;        recipe.setDescription(recipeInputDto.getDescription());&#10;        recipe.setQuantity(recipeInputDto.getQuantity());&#10;        recipe.setUnit(recipeInputDto.getUnit());&#10;        // Mejor manejo de categorÃ­a: siempre buscar y setear la entidad&#10;        Category category = categoryRepository.findById(recipeInputDto.getCategoryId())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Category not found&quot;));&#10;        recipe.setCategory(category);&#10;        recipe.setImageUrl(recipeInputDto.getImageUrl());&#10;&#10;        // Limpiar y actualizar ingredientes&#10;        recipe.getRecipeSupplies().clear();&#10;        recipeInputDto.getIngredients().forEach(recipeSupplyDto -&gt; {&#10;            SupplyEntity supplyEntity = supplyRepository&#10;                    .findById(recipeSupplyDto.getSupplyId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Supply not found&quot;));&#10;            RecipeSupply recipeSupply = new RecipeSupply();&#10;            recipeSupply.setRecipe(recipe);&#10;            recipeSupply.setSupply(supplyEntity);&#10;            recipeSupply.setQuantity(recipeSupplyDto.getQuantity());&#10;            recipe.getRecipeSupplies().add(recipeSupply);&#10;        });&#10;&#10;        // Limpiar y actualizar sub-recetas&#10;        recipe.getRecipeRecipeRelations().clear();&#10;        recipeInputDto.getRecipes().forEach(recipeRecipeDto -&gt; {&#10;            Recipe subRecipe = recipeRepository&#10;                    .findById(recipeRecipeDto.getRecipeId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Sub-recipe not found&quot;));&#10;            RecipeRecipeRelationEntity relation = new RecipeRecipeRelationEntity();&#10;            relation.setRecipe(recipe);&#10;            relation.setSubRecipe(subRecipe);&#10;            relation.setQuantity(recipeRecipeDto.getQuantity());&#10;            recipe.getRecipeRecipeRelations().add(relation);&#10;        });&#10;&#10;        recipeRepository.save(recipe);&#10;        return toRecipeDTO(recipe);&#10;    }&#10;&#10;&#10;    public void deleteRecipe(Long id) {&#10;        try {&#10;            recipeRepository.deleteById(id);&#10;        } catch (DataIntegrityViolationException e) {&#10;            throw new CannotDeleteSupplyException(&quot;El insumo estÃ¡ siendo ocupado por algÃºn producto final. Por favor, elimÃ­nalos primero.&quot;);&#10;        }&#10;&#10;    }&#10;&#10;    public RecipeOuputDto toRecipeDTO(Recipe recipe) {&#10;        RecipeOuputDto dto = new RecipeOuputDto();&#10;        dto.setId(recipe.getId());&#10;        dto.setName(recipe.getName());&#10;        dto.setQuantity(recipe.getQuantity());&#10;        dto.setUnit(recipe.getUnit());&#10;        dto.setCostRecipe(recipe.cost());&#10;        dto.setImageUrl(recipe.getImageUrl());&#10;        dto.setDescription(recipe.getDescription());&#10;        dto.setRecipeCategory(recipe.getCategory());&#10;&#10;        // Transformar recipeSupplies&#10;        Set&lt;SupplyDto&gt; supplies = recipe.getRecipeSupplies().stream()&#10;                .map(supply -&gt; {&#10;                    SupplyDto supplyDTO = new SupplyDto();&#10;                    supplyDTO.setName(supply.getSupply().getName());&#10;                    supplyDTO.setId(supply.getSupply().getId());&#10;                    supplyDTO.setQuantity(supply.getQuantity());&#10;                    supplyDTO.setPrice(supply.cost());&#10;                    supplyDTO.setUnit(supply.getSupply().getUnit());&#10;                    return supplyDTO;&#10;                })&#10;                .collect(Collectors.toSet());&#10;        dto.setSupplies(supplies);&#10;&#10;&#10;        Set&lt;SubRecipeOutputDto&gt; subRecipeOutputDtos = recipe.getRecipeRecipeRelations().stream()&#10;                .map(subRecipe -&gt; {&#10;                    SubRecipeOutputDto recipeOutputDto = new SubRecipeOutputDto();&#10;                    recipeOutputDto.setName(subRecipe.getSubRecipe().getName());&#10;                    recipeOutputDto.setId(subRecipe.getSubRecipe().getId());&#10;                    recipeOutputDto.setQuantity(subRecipe.getQuantity());&#10;                    recipeOutputDto.setCost(subRecipe.cost());&#10;                    recipeOutputDto.setUnit(subRecipe.getSubRecipe().getUnit());&#10;                    return recipeOutputDto;&#10;                })&#10;                .collect(Collectors.toSet());&#10;        dto.setRecipes(subRecipeOutputDtos);&#10;&#10;        return dto;&#10;    }&#10;&#10;&#10;    public RecipeOuputDto toRecipeDTOBasic(Recipe recipe) {&#10;        RecipeOuputDto dto = new RecipeOuputDto();&#10;        dto.setId(recipe.getId());&#10;        dto.setName(recipe.getName());&#10;        dto.setQuantity(recipe.getQuantity());&#10;        dto.setUnit(recipe.getUnit());&#10;        //dto.setCostRecipe(recipe.cost());&#10;        dto.setImageUrl(recipe.getImageUrl());&#10;        dto.setDescription(recipe.getDescription());&#10;        dto.setRecipeCategory(recipe.getCategory());&#10;&#10;        return dto;&#10;    }&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.sevenb.recipes_manager.service;&#10;&#10;&#10;import com.sevenb.recipes_manager.Exception.CannotDeleteSupplyException;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeInputDto;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeOuputDto;&#10;import com.sevenb.recipes_manager.dto.SupplyDto;&#10;import com.sevenb.recipes_manager.dto.recipe.SubRecipeOutputDto;&#10;import com.sevenb.recipes_manager.entity.*;&#10;import com.sevenb.recipes_manager.repository.*;&#10;import jakarta.transaction.Transactional;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.dao.DataIntegrityViolationException;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.text.DecimalFormat;&#10;import java.util.HashSet;&#10;import java.util.Locale;&#10;import java.util.Set;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;public class RecipeService {&#10;&#10;    @Autowired&#10;    private RecipeRepository recipeRepository;&#10;&#10;    @Autowired&#10;    private SupplyRepository supplyRepository;&#10;&#10;    @Autowired&#10;    private RecipeSupplyRepository recipeIngredientRepository;&#10;&#10;    @Autowired&#10;    private RecipeCategoryRepository categoryRepository;&#10;&#10;    @Transactional&#10;    public RecipeOuputDto createRecipe(RecipeInputDto recipeInputDto) {&#10;&#10;        Recipe recipe = new Recipe();&#10;        recipe.setDescription(recipeInputDto.getDescription());&#10;        recipe.setName(recipeInputDto.getName().toUpperCase(Locale.ROOT));&#10;        recipe.setQuantity(recipeInputDto.getQuantity());&#10;        recipe.setUnit(recipeInputDto.getUnit());&#10;        recipe.setCategory(categoryRepository.findById(recipeInputDto.getCategoryId()).orElseThrow());&#10;        recipe.setUserId(recipeInputDto.getUserId());&#10;        recipe.setImageUrl(recipeInputDto.getImageUrl());&#10;&#10;        recipeInputDto.getIngredients().forEach(recipeSupplyDto -&gt; {&#10;            SupplyEntity supplyEntity = supplyRepository&#10;                    .findById(recipeSupplyDto.getSupplyId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Supply id: &quot; + recipeSupplyDto.getSupplyId() + &quot; not found&quot;));&#10;            RecipeSupply recipeSupply = new RecipeSupply();&#10;            recipeSupply.setRecipe(recipe);&#10;            recipeSupply.setSupply(supplyEntity);&#10;            recipeSupply.setQuantity(recipeSupplyDto.getQuantity());&#10;            recipe.getRecipeSupplies().add(recipeSupply);&#10;        });&#10;&#10;        recipeInputDto.getRecipes().forEach(recipeRecipeDto -&gt; {&#10;            Recipe subRecipe = recipeRepository&#10;                    .findById(recipeRecipeDto.getRecipeId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Supply not found&quot;));&#10;            RecipeRecipeRelationEntity recipeRecipeRelation = new RecipeRecipeRelationEntity();&#10;&#10;            recipeRecipeRelation.setRecipe(recipe);&#10;            recipeRecipeRelation.setSubRecipe(subRecipe);&#10;            recipeRecipeRelation.setQuantity(recipeRecipeDto.getQuantity());&#10;            recipe.getRecipeRecipeRelations().add(recipeRecipeRelation);&#10;        });&#10;&#10;        return toRecipeDTO(recipeRepository.save(recipe));&#10;    }&#10;&#10;    public Set&lt;RecipeOuputDto&gt; getAllRecipes(Long userId) {&#10;        Set&lt;RecipeOuputDto&gt; recipeOuputDtos = new HashSet&lt;&gt;();&#10;        recipeRepository.findAllByUserId(userId).forEach(l&#10;                -&gt; recipeOuputDtos.add(toRecipeDTOBasic(l)));&#10;        return recipeOuputDtos;&#10;    }&#10;&#10;    public RecipeOuputDto getRecipeById(Long id) {&#10;        Recipe recipe = recipeRepository.findById(id).orElseThrow(() -&gt; new RuntimeException(&quot;Recipe not found&quot;));&#10;        return toRecipeDTO(recipe);&#10;    }&#10;&#10;    @Transactional&#10;    public RecipeOuputDto updateRecipe(RecipeInputDto recipeInputDto, Long id) {&#10;        Recipe recipe = recipeRepository.findById(id)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Recipe not found&quot;));&#10;        recipe.setName(recipeInputDto.getName().toUpperCase(Locale.ROOT));&#10;        recipe.setDescription(recipeInputDto.getDescription());&#10;        recipe.setQuantity(recipeInputDto.getQuantity());&#10;        recipe.setUnit(recipeInputDto.getUnit());&#10;        // Mejor manejo de categorÃ­a: siempre buscar y setear la entidad&#10;        Category category = categoryRepository.findById(recipeInputDto.getCategoryId())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Category not found&quot;));&#10;        recipe.setCategory(category);&#10;        recipe.setImageUrl(recipeInputDto.getImageUrl());&#10;&#10;        // Limpiar y actualizar ingredientes&#10;        recipe.getRecipeSupplies().clear();&#10;        recipeInputDto.getIngredients().forEach(recipeSupplyDto -&gt; {&#10;            SupplyEntity supplyEntity = supplyRepository&#10;                    .findById(recipeSupplyDto.getSupplyId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Supply not found&quot;));&#10;            RecipeSupply recipeSupply = new RecipeSupply();&#10;            recipeSupply.setRecipe(recipe);&#10;            recipeSupply.setSupply(supplyEntity);&#10;            recipeSupply.setQuantity(recipeSupplyDto.getQuantity());&#10;            recipe.getRecipeSupplies().add(recipeSupply);&#10;        });&#10;&#10;        // Limpiar y actualizar sub-recetas&#10;        recipe.getRecipeRecipeRelations().clear();&#10;        recipeInputDto.getRecipes().forEach(recipeRecipeDto -&gt; {&#10;            Recipe subRecipe = recipeRepository&#10;                    .findById(recipeRecipeDto.getRecipeId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Sub-recipe not found&quot;));&#10;            RecipeRecipeRelationEntity relation = new RecipeRecipeRelationEntity();&#10;            relation.setRecipe(recipe);&#10;            relation.setSubRecipe(subRecipe);&#10;            relation.setQuantity(recipeRecipeDto.getQuantity());&#10;            recipe.getRecipeRecipeRelations().add(relation);&#10;        });&#10;&#10;        recipeRepository.save(recipe);&#10;        return toRecipeDTO(recipe);&#10;    }&#10;&#10;&#10;    public void deleteRecipe(Long id) {&#10;        try {&#10;            recipeRepository.deleteById(id);&#10;        } catch (DataIntegrityViolationException e) {&#10;            throw new CannotDeleteSupplyException(&quot;El insumo estÃ¡ siendo ocupado por algÃºn producto final. Por favor, elimÃ­nalos primero.&quot;);&#10;        }&#10;&#10;    }&#10;&#10;    public RecipeOuputDto toRecipeDTO(Recipe recipe) {&#10;        RecipeOuputDto dto = new RecipeOuputDto();&#10;        dto.setId(recipe.getId());&#10;        dto.setName(recipe.getName());&#10;        dto.setQuantity(recipe.getQuantity());&#10;        dto.setUnit(recipe.getUnit());&#10;        dto.setCostRecipe(recipe.cost());&#10;        dto.setImageUrl(recipe.getImageUrl());&#10;        dto.setDescription(recipe.getDescription());&#10;        dto.setRecipeCategory(recipe.getCategory());&#10;&#10;        // Transformar recipeSupplies&#10;        Set&lt;SupplyDto&gt; supplies = recipe.getRecipeSupplies().stream()&#10;                .map(supply -&gt; {&#10;                    SupplyDto supplyDTO = new SupplyDto();&#10;                    supplyDTO.setName(supply.getSupply().getName());&#10;                    supplyDTO.setId(supply.getSupply().getId());&#10;                    supplyDTO.setQuantity(supply.getQuantity());&#10;                    supplyDTO.setPrice(supply.cost());&#10;                    supplyDTO.setUnit(supply.getSupply().getUnit());&#10;                    return supplyDTO;&#10;                })&#10;                .collect(Collectors.toSet());&#10;        dto.setSupplies(supplies);&#10;&#10;&#10;        Set&lt;SubRecipeOutputDto&gt; subRecipeOutputDtos = recipe.getRecipeRecipeRelations().stream()&#10;                .map(subRecipe -&gt; {&#10;                    SubRecipeOutputDto recipeOutputDto = new SubRecipeOutputDto();&#10;                    recipeOutputDto.setName(subRecipe.getSubRecipe().getName());&#10;                    recipeOutputDto.setId(subRecipe.getSubRecipe().getId());&#10;                    recipeOutputDto.setQuantity(subRecipe.getQuantity());&#10;                    recipeOutputDto.setCost(subRecipe.cost());&#10;                    recipeOutputDto.setUnit(subRecipe.getSubRecipe().getUnit());&#10;                    return recipeOutputDto;&#10;                })&#10;                .collect(Collectors.toSet());&#10;        dto.setRecipes(subRecipeOutputDtos);&#10;&#10;        return dto;&#10;    }&#10;&#10;&#10;    public RecipeOuputDto toRecipeDTOBasic(Recipe recipe) {&#10;        RecipeOuputDto dto = new RecipeOuputDto();&#10;        dto.setId(recipe.getId());&#10;        dto.setName(recipe.getName());&#10;        dto.setQuantity(recipe.getQuantity());&#10;        dto.setUnit(recipe.getUnit());&#10;        //dto.setCostRecipe(recipe.cost());&#10;        dto.setImageUrl(recipe.getImageUrl());&#10;        dto.setDescription(recipe.getDescription());&#10;        dto.setRecipeCategory(recipe.getCategory());&#10;&#10;        return dto;&#10;    }&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/db/migration/V1__create_recipe_production.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/db/migration/V1__create_recipe_production.sql" />
              <option name="updatedContent" value="CREATE TABLE recipe_production (&#10;    id SERIAL PRIMARY KEY,&#10;    recipe_id BIGINT NOT NULL REFERENCES recipes(id),&#10;    quantity_produced DOUBLE PRECISION,&#10;    unit VARCHAR(50),&#10;    production_date TIMESTAMP,&#10;    user_id BIGINT,&#10;    expected_quantity DOUBLE PRECISION,&#10;    yield DOUBLE PRECISION,&#10;    cost DOUBLE PRECISION,&#10;    notes VARCHAR(255)&#10;);" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>