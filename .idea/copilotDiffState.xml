<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/controller/RecipeController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/controller/RecipeController.java" />
              <option name="originalContent" value="package com.sevenb.recipes_manager.controller;&#10;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeOuputDto;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeInputDto;&#10;import com.sevenb.recipes_manager.dto.recipe.ProductionRequestDto;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeProductionDto;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeLossDto;&#10;&#10;import com.sevenb.recipes_manager.entity.RecipeLoss;&#10;import com.sevenb.recipes_manager.entity.RecipeProduction;&#10;import com.sevenb.recipes_manager.service.CloudinaryService;&#10;import com.sevenb.recipes_manager.service.RecipeService;&#10;import com.sevenb.recipes_manager.service.RecipeProductionService;&#10;import com.sevenb.recipes_manager.service.RecipeLossService;&#10;&#10;import com.sevenb.recipes_manager.util.JwtUtil;&#10;import lombok.RequiredArgsConstructor;&#10;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.http.ResponseEntity;&#10;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.io.IOException;&#10;import java.util.Base64;&#10;import java.util.List;&#10;import java.util.Objects;&#10;import java.util.Set;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/recipes&quot;)&#10;@RequiredArgsConstructor&#10;public class RecipeController {&#10;&#10;    private final RecipeService recipeService;&#10;    private final JwtUtil jwtUtil;&#10;    private final CloudinaryService cloudinaryService;&#10;    private final RecipeProductionService recipeProductionService;&#10;    private final RecipeLossService recipeLossService;&#10;&#10;    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)&#10;    public ResponseEntity&lt;RecipeOuputDto&gt; createRecipe(@RequestHeader(&quot;Authorization&quot;) String authHeader,&#10;                                               @RequestBody RecipeInputDto recipeInputDto) throws IOException {&#10;&#10;&#10;        if (recipeInputDto.getImageBase64() != null &amp;&amp; !recipeInputDto.getImageBase64().isEmpty()) {&#10;            byte[] imageBytes = Base64.getDecoder().decode(recipeInputDto.getImageBase64());&#10;            String url = cloudinaryService.upload(imageBytes);&#10;            recipeInputDto.setImageUrl(url);&#10;        }&#10;&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;        recipeInputDto.setUserId(userId);&#10;&#10;        RecipeOuputDto savedRecipe = recipeService.createRecipe(recipeInputDto);&#10;        return ResponseEntity.status(HttpStatus.CREATED).body(savedRecipe);&#10;    }&#10;&#10;    @GetMapping&#10;    public Set&lt;RecipeOuputDto&gt; getAllRecipes(@RequestHeader(&quot;Authorization&quot;) String authHeader) {&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;&#10;        return recipeService.getAllRecipes(userId);&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;RecipeOuputDto&gt; getRecipeById(@PathVariable Long id) {&#10;        RecipeOuputDto recipe = recipeService.getRecipeById(id);&#10;        if (Objects.nonNull(recipe))&#10;            return ResponseEntity.ok(recipe);&#10;        else&#10;            return ResponseEntity.notFound().build();&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteRecipe(@PathVariable Long id) {&#10;        recipeService.deleteRecipe(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;RecipeOuputDto&gt; updateRecipe(@RequestBody RecipeInputDto recipe,&#10;                                                       @PathVariable Long id) throws IOException {&#10;&#10;        if (recipe.getImageBase64() != null &amp;&amp; !recipe.getImageBase64().isEmpty()) {&#10;            byte[] imageBytes = Base64.getDecoder().decode(recipe.getImageBase64());&#10;            String url = cloudinaryService.upload(imageBytes);&#10;            recipe.setImageUrl(url);&#10;        }&#10;        if (Boolean.TRUE.equals(recipe.getDeleteImage())) {&#10;            recipe.setImageUrl(null);&#10;        }&#10;&#10;&#10;        RecipeOuputDto savedRecipe = recipeService.updateRecipe(recipe,id);&#10;        return ResponseEntity.status(HttpStatus.CREATED).body(savedRecipe);&#10;    }&#10;&#10;    // --- Endpoints de producción de recetas ---&#10;    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, value = &quot;/production&quot;)&#10;    public ResponseEntity&lt;RecipeProductionDto&gt; registerProduction(&#10;            @RequestHeader(&quot;Authorization&quot;) String authHeader,&#10;            @RequestBody ProductionRequestDto productionRequestDto) {&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;        RecipeProduction production = recipeProductionService.registerProduction(productionRequestDto, userId);&#10;        RecipeProductionDto dto = recipeProductionService.toDto(production);&#10;        return ResponseEntity.status(HttpStatus.CREATED).body(dto);&#10;    }&#10;&#10;    @GetMapping(&quot;/production&quot;)&#10;    public ResponseEntity&lt;List&lt;RecipeProductionDto&gt;&gt; getAllProductionsByUser(@RequestHeader(&quot;Authorization&quot;) String authHeader) {&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;        List&lt;RecipeProductionDto&gt; productions = recipeProductionService.getAllProductionsByUserDto(userId);&#10;        return ResponseEntity.ok(productions);&#10;    }&#10;&#10;    // --- Endpoints de pérdidas de recetas ---&#10;    @PostMapping(value = &quot;/loss&quot;, consumes = MediaType.APPLICATION_JSON_VALUE)&#10;    public ResponseEntity&lt;RecipeLossDto&gt; registerLoss(&#10;            @RequestHeader(&quot;Authorization&quot;) String authHeader,&#10;            @RequestBody RecipeLossDto lossRequestDto) throws IOException {&#10;&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;        RecipeLoss loss = recipeLossService.registerLoss(&#10;                lossRequestDto.getRecipeId(),&#10;                lossRequestDto.getQuantityLost(),&#10;                userId,&#10;                lossRequestDto.getNotes(),&#10;                lossRequestDto.getImageBase64()&#10;        );&#10;        RecipeLossDto dto = recipeLossService.toDto(loss);&#10;        return ResponseEntity.status(HttpStatus.CREATED).body(dto);&#10;    }&#10;&#10;    @GetMapping(&quot;/loss&quot;)&#10;    public ResponseEntity&lt;List&lt;RecipeLossDto&gt;&gt; getAllLossesByUser(@RequestHeader(&quot;Authorization&quot;) String authHeader) {&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;        List&lt;RecipeLossDto&gt; losses = recipeLossService.getAllLossesByUserDto(userId);&#10;        return ResponseEntity.ok(losses);&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.sevenb.recipes_manager.controller;&#10;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeOuputDto;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeInputDto;&#10;import com.sevenb.recipes_manager.dto.recipe.ProductionRequestDto;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeProductionDto;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeLossDto;&#10;&#10;import com.sevenb.recipes_manager.entity.RecipeLoss;&#10;import com.sevenb.recipes_manager.entity.RecipeProduction;&#10;import com.sevenb.recipes_manager.service.CloudinaryService;&#10;import com.sevenb.recipes_manager.service.RecipeService;&#10;import com.sevenb.recipes_manager.service.RecipeProductionService;&#10;import com.sevenb.recipes_manager.service.RecipeLossService;&#10;&#10;import com.sevenb.recipes_manager.util.JwtUtil;&#10;import lombok.RequiredArgsConstructor;&#10;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.http.ResponseEntity;&#10;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.io.IOException;&#10;import java.util.Base64;&#10;import java.util.List;&#10;import java.util.Objects;&#10;import java.util.Set;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/recipes&quot;)&#10;@RequiredArgsConstructor&#10;public class RecipeController {&#10;&#10;    private final RecipeService recipeService;&#10;    private final JwtUtil jwtUtil;&#10;    private final CloudinaryService cloudinaryService;&#10;    private final RecipeProductionService recipeProductionService;&#10;    private final RecipeLossService recipeLossService;&#10;&#10;    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)&#10;    public ResponseEntity&lt;RecipeOuputDto&gt; createRecipe(@RequestHeader(&quot;Authorization&quot;) String authHeader,&#10;                                               @RequestBody RecipeInputDto recipeInputDto) throws IOException {&#10;&#10;&#10;        if (recipeInputDto.getImageBase64() != null &amp;&amp; !recipeInputDto.getImageBase64().isEmpty()) {&#10;            byte[] imageBytes = Base64.getDecoder().decode(recipeInputDto.getImageBase64());&#10;            String url = cloudinaryService.upload(imageBytes);&#10;            recipeInputDto.setImageUrl(url);&#10;        }&#10;&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;        recipeInputDto.setUserId(userId);&#10;&#10;        RecipeOuputDto savedRecipe = recipeService.createRecipe(recipeInputDto);&#10;        return ResponseEntity.status(HttpStatus.CREATED).body(savedRecipe);&#10;    }&#10;&#10;    @GetMapping&#10;    public Set&lt;RecipeOuputDto&gt; getAllRecipes(@RequestHeader(&quot;Authorization&quot;) String authHeader) {&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;&#10;        return recipeService.getAllRecipes(userId);&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;RecipeOuputDto&gt; getRecipeById(@PathVariable Long id) {&#10;        RecipeOuputDto recipe = recipeService.getRecipeById(id);&#10;        if (Objects.nonNull(recipe))&#10;            return ResponseEntity.ok(recipe);&#10;        else&#10;            return ResponseEntity.notFound().build();&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteRecipe(@PathVariable Long id) {&#10;        recipeService.deleteRecipe(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;RecipeOuputDto&gt; updateRecipe(@RequestBody RecipeInputDto recipe,&#10;                                                       @PathVariable Long id) throws IOException {&#10;&#10;        if (recipe.getImageBase64() != null &amp;&amp; !recipe.getImageBase64().isEmpty()) {&#10;            byte[] imageBytes = Base64.getDecoder().decode(recipe.getImageBase64());&#10;            String url = cloudinaryService.upload(imageBytes);&#10;            recipe.setImageUrl(url);&#10;        }&#10;        if (Boolean.TRUE.equals(recipe.getDeleteImage())) {&#10;            recipe.setImageUrl(null);&#10;        }&#10;&#10;&#10;        RecipeOuputDto savedRecipe = recipeService.updateRecipe(recipe,id);&#10;        return ResponseEntity.status(HttpStatus.CREATED).body(savedRecipe);&#10;    }&#10;&#10;    // --- Endpoints de producción de recetas ---&#10;    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, value = &quot;/production&quot;)&#10;    public ResponseEntity&lt;RecipeProductionDto&gt; registerProduction(&#10;            @RequestHeader(&quot;Authorization&quot;) String authHeader,&#10;            @RequestBody ProductionRequestDto productionRequestDto) {&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;        RecipeProduction production = recipeProductionService.registerProduction(productionRequestDto, userId);&#10;        RecipeProductionDto dto = recipeProductionService.toDto(production);&#10;        return ResponseEntity.status(HttpStatus.CREATED).body(dto);&#10;    }&#10;&#10;    @GetMapping(&quot;/production&quot;)&#10;    public ResponseEntity&lt;List&lt;RecipeProductionDto&gt;&gt; getAllProductionsByUser(@RequestHeader(&quot;Authorization&quot;) String authHeader) {&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;        List&lt;RecipeProductionDto&gt; productions = recipeProductionService.getAllProductionsByUserDto(userId);&#10;        return ResponseEntity.ok(productions);&#10;    }&#10;&#10;    // --- Endpoints de pérdidas de recetas ---&#10;    @PostMapping(value = &quot;/loss&quot;, consumes = MediaType.APPLICATION_JSON_VALUE)&#10;    public ResponseEntity&lt;RecipeLossDto&gt; registerLoss(&#10;            @RequestHeader(&quot;Authorization&quot;) String authHeader,&#10;            @RequestBody RecipeLossDto lossRequestDto) throws IOException {&#10;&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;        RecipeLoss loss = recipeLossService.registerLoss(&#10;                lossRequestDto.getRecipeId(),&#10;                lossRequestDto.getQuantityLost(),&#10;                userId,&#10;                lossRequestDto.getNotes(),&#10;                lossRequestDto.getImageBase64()&#10;        );&#10;        RecipeLossDto dto = recipeLossService.toDto(loss);&#10;        return ResponseEntity.status(HttpStatus.CREATED).body(dto);&#10;    }&#10;&#10;    @GetMapping(&quot;/loss&quot;)&#10;    public ResponseEntity&lt;List&lt;RecipeLossDto&gt;&gt; getAllLossesByUser(&#10;            @RequestHeader(&quot;Authorization&quot;) String authHeader,&#10;            @RequestParam(value = &quot;from&quot;, required = false) String from,&#10;            @RequestParam(value = &quot;to&quot;, required = false) String to) {&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;        List&lt;RecipeLossDto&gt; losses;&#10;        if (from != null &amp;&amp; to != null) {&#10;            losses = recipeLossService.getAllLossesByUserAndDateRangeDto(userId, from, to);&#10;        } else {&#10;            losses = recipeLossService.getAllLossesByUserDto(userId);&#10;        }&#10;        return ResponseEntity.ok(losses);&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/controller/RecipeProductionController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/controller/RecipeProductionController.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/controller/SupplyController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/controller/SupplyController.java" />
              <option name="originalContent" value="package com.sevenb.recipes_manager.controller;&#10;&#10;import com.sevenb.recipes_manager.dto.LossDTO;&#10;import com.sevenb.recipes_manager.dto.SupplyLossOutputDTO;&#10;import com.sevenb.recipes_manager.entity.StockMovement;&#10;import com.sevenb.recipes_manager.entity.SupplyLoss;&#10;import com.sevenb.recipes_manager.entity.SupplyEntity;&#10;import com.sevenb.recipes_manager.service.CloudinaryService;&#10;import com.sevenb.recipes_manager.service.LossService;&#10;import com.sevenb.recipes_manager.service.SupplyService;&#10;import com.sevenb.recipes_manager.util.JwtUtil;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.format.annotation.DateTimeFormat;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.web.multipart.MultipartFile;&#10;&#10;import java.io.IOException;&#10;import java.time.LocalDate;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/supplies&quot;)&#10;@RequiredArgsConstructor&#10;public class SupplyController {&#10;&#10;&#10;    private final SupplyService supplyService;&#10;    private final JwtUtil jwtUtil;&#10;    private final LossService lossService;&#10;    private final CloudinaryService cloudinaryService;&#10;&#10;    // Get all supplies&#10;    @GetMapping&#10;    public List&lt;SupplyEntity&gt; getAllSupplies(@RequestHeader(&quot;Authorization&quot;) String authHeader) {&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;        return supplyService.getAllSupplies(userId);&#10;    }&#10;&#10;    // Get a supply by ID&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;SupplyEntity&gt; getSupplyById(&#10;            @PathVariable Long id) {&#10;        SupplyEntity supply = supplyService.getSupplyById(id);&#10;        if (supply != null) {&#10;            return ResponseEntity.ok(supply);&#10;        }&#10;        return ResponseEntity.notFound().build();&#10;    }&#10;&#10;    // Create a new supply&#10;    @PostMapping&#10;    public SupplyEntity createSupply(@RequestHeader(&quot;Authorization&quot;) String authHeader&#10;            ,@RequestBody SupplyEntity supply) {&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;        supply.setUserId(userId);&#10;        return supplyService.saveSupply(supply);&#10;    }&#10;&#10;    // Update an existing supply&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;SupplyEntity&gt; updateSupply(@PathVariable Long id, @RequestBody SupplyEntity supplyDetails) {&#10;        SupplyEntity updatedSupply = supplyService.updateSupply(id, supplyDetails);&#10;        if (updatedSupply != null) {&#10;            return ResponseEntity.ok(updatedSupply);&#10;        }&#10;        return ResponseEntity.notFound().build();&#10;    }&#10;&#10;    // Delete a supply by ID&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteSupply(@PathVariable Long id) {&#10;        supplyService.deleteSupply(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;&#10;    // Search supplies by name&#10;    @GetMapping(&quot;/search&quot;)&#10;    public List&lt;SupplyEntity&gt; searchSupplies(@RequestParam String name) {&#10;        return supplyService.searchByName(name);&#10;    }&#10;&#10;    @PostMapping(&quot;/losses&quot;)&#10;    public ResponseEntity&lt;SupplyLoss&gt; createLoss(@RequestPart(&quot;loss&quot;) LossDTO dto,&#10;                                                 @RequestPart(value = &quot;image&quot;, required = false) MultipartFile image) throws IOException {&#10;&#10;        if (image != null) {&#10;            String url = cloudinaryService.upload(image);&#10;            dto.setImageUrl(url);&#10;        }&#10;&#10;&#10;        SupplyLoss saved = lossService.registerLoss(dto);&#10;        return ResponseEntity.ok(saved);&#10;    }&#10;&#10;    @GetMapping(&quot;/losses&quot;)&#10;    public List&lt;SupplyLossOutputDTO&gt; getLossesByDateRange(&#10;            @RequestParam(&quot;from&quot;) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate from,&#10;            @RequestParam(&quot;to&quot;) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate to) {&#10;&#10;        return lossService.findByLossDateBetween(from, to);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}/stock/increase&quot;)&#10;    public ResponseEntity&lt;SupplyEntity&gt; increaseStock(&#10;            @PathVariable Long id,&#10;            @RequestParam double amount,&#10;            @RequestParam(required = false, defaultValue = &quot;Compra&quot;) String reason&#10;    ) {&#10;        return ResponseEntity.of(supplyService.adjustStock(id, amount, &quot;ENTRADA&quot;, reason));&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}/stock/decrease&quot;)&#10;    public ResponseEntity&lt;SupplyEntity&gt; decreaseStock(&#10;            @PathVariable Long id,&#10;            @RequestParam double amount,&#10;            @RequestParam(required = false, defaultValue = &quot;Consumo&quot;) String reason&#10;    ) {&#10;        return ResponseEntity.of(supplyService.adjustStock(id, -amount, &quot;SALIDA&quot;, reason));&#10;    }&#10;&#10;    @GetMapping(&quot;/low-stock&quot;)&#10;    public List&lt;SupplyEntity&gt; getLowStock(@RequestHeader(&quot;Authorization&quot;) String authHeader) {&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;        if (from != null &amp;&amp; to != null) {&#10;            return supplyService.getLowStockSuppliesByUserAndCheckStockAndDate(userId, from, to);&#10;        }&#10;        return supplyService.getLowStockSuppliesByUserAndCheckStock(userId);&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}/movements&quot;)&#10;    public List&lt;StockMovement&gt; getMovements(@PathVariable Long id) {&#10;        return supplyService.getMovementsBySupply(id);&#10;    }&#10;&#10;    @GetMapping(&quot;/all-stock&quot;)&#10;    public List&lt;SupplyEntity&gt; getAllSuppliesCheckStock(@RequestHeader(&quot;Authorization&quot;) String authHeader,&#10;                                                       @RequestParam(required = false, defaultValue = &quot;true&quot;) boolean checkStock) {&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;        return supplyService.getAllSuppliesCheckStock(userId, checkStock);&#10;    }&#10;&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.sevenb.recipes_manager.controller;&#10;&#10;import com.sevenb.recipes_manager.dto.LossDTO;&#10;import com.sevenb.recipes_manager.dto.SupplyLossOutputDTO;&#10;import com.sevenb.recipes_manager.entity.StockMovement;&#10;import com.sevenb.recipes_manager.entity.SupplyLoss;&#10;import com.sevenb.recipes_manager.entity.SupplyEntity;&#10;import com.sevenb.recipes_manager.service.CloudinaryService;&#10;import com.sevenb.recipes_manager.service.LossService;&#10;import com.sevenb.recipes_manager.service.SupplyService;&#10;import com.sevenb.recipes_manager.util.JwtUtil;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.format.annotation.DateTimeFormat;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.web.multipart.MultipartFile;&#10;&#10;import java.io.IOException;&#10;import java.time.LocalDate;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/supplies&quot;)&#10;@RequiredArgsConstructor&#10;public class SupplyController {&#10;&#10;&#10;    private final SupplyService supplyService;&#10;    private final JwtUtil jwtUtil;&#10;    private final LossService lossService;&#10;    private final CloudinaryService cloudinaryService;&#10;&#10;    // Get all supplies&#10;    @GetMapping&#10;    public List&lt;SupplyEntity&gt; getAllSupplies(@RequestHeader(&quot;Authorization&quot;) String authHeader) {&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;        return supplyService.getAllSupplies(userId);&#10;    }&#10;&#10;    // Get a supply by ID&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;SupplyEntity&gt; getSupplyById(&#10;            @PathVariable Long id) {&#10;        SupplyEntity supply = supplyService.getSupplyById(id);&#10;        if (supply != null) {&#10;            return ResponseEntity.ok(supply);&#10;        }&#10;        return ResponseEntity.notFound().build();&#10;    }&#10;&#10;    // Create a new supply&#10;    @PostMapping&#10;    public SupplyEntity createSupply(@RequestHeader(&quot;Authorization&quot;) String authHeader&#10;            ,@RequestBody SupplyEntity supply) {&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;        supply.setUserId(userId);&#10;        return supplyService.saveSupply(supply);&#10;    }&#10;&#10;    // Update an existing supply&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;SupplyEntity&gt; updateSupply(@PathVariable Long id, @RequestBody SupplyEntity supplyDetails) {&#10;        SupplyEntity updatedSupply = supplyService.updateSupply(id, supplyDetails);&#10;        if (updatedSupply != null) {&#10;            return ResponseEntity.ok(updatedSupply);&#10;        }&#10;        return ResponseEntity.notFound().build();&#10;    }&#10;&#10;    // Delete a supply by ID&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteSupply(@PathVariable Long id) {&#10;        supplyService.deleteSupply(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;&#10;    // Search supplies by name&#10;    @GetMapping(&quot;/search&quot;)&#10;    public List&lt;SupplyEntity&gt; searchSupplies(@RequestParam String name) {&#10;        return supplyService.searchByName(name);&#10;    }&#10;&#10;    @PostMapping(&quot;/losses&quot;)&#10;    public ResponseEntity&lt;SupplyLoss&gt; createLoss(@RequestPart(&quot;loss&quot;) LossDTO dto,&#10;                                                 @RequestPart(value = &quot;image&quot;, required = false) MultipartFile image) throws IOException {&#10;&#10;        if (image != null) {&#10;            String url = cloudinaryService.upload(image);&#10;            dto.setImageUrl(url);&#10;        }&#10;&#10;&#10;        SupplyLoss saved = lossService.registerLoss(dto);&#10;        return ResponseEntity.ok(saved);&#10;    }&#10;&#10;    @GetMapping(&quot;/losses&quot;)&#10;    public List&lt;SupplyLossOutputDTO&gt; getLossesByDateRange(&#10;            @RequestParam(&quot;from&quot;) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate from,&#10;            @RequestParam(&quot;to&quot;) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate to) {&#10;&#10;        return lossService.findByLossDateBetween(from, to);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}/stock/increase&quot;)&#10;    public ResponseEntity&lt;SupplyEntity&gt; increaseStock(&#10;            @PathVariable Long id,&#10;            @RequestParam double amount,&#10;            @RequestParam(required = false, defaultValue = &quot;Compra&quot;) String reason&#10;    ) {&#10;        return ResponseEntity.of(supplyService.adjustStock(id, amount, &quot;ENTRADA&quot;, reason));&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}/stock/decrease&quot;)&#10;    public ResponseEntity&lt;SupplyEntity&gt; decreaseStock(&#10;            @PathVariable Long id,&#10;            @RequestParam double amount,&#10;            @RequestParam(required = false, defaultValue = &quot;Consumo&quot;) String reason&#10;    ) {&#10;        return ResponseEntity.of(supplyService.adjustStock(id, -amount, &quot;SALIDA&quot;, reason));&#10;    }&#10;&#10;    @GetMapping(&quot;/low-stock&quot;)&#10;    public List&lt;SupplyEntity&gt; getLowStock(@RequestHeader(&quot;Authorization&quot;) String authHeader,&#10;                                          @RequestParam(value = &quot;from&quot;, required = false) String from,&#10;                                          @RequestParam(value = &quot;to&quot;, required = false) String to) {&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;        if (from != null &amp;&amp; to != null) {&#10;            return supplyService.getLowStockSuppliesByUserAndCheckStockAndDate(userId, from, to);&#10;        }&#10;        return supplyService.getLowStockSuppliesByUserAndCheckStock(userId);&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}/movements&quot;)&#10;    public List&lt;StockMovement&gt; getMovements(@PathVariable Long id) {&#10;        return supplyService.getMovementsBySupply(id);&#10;    }&#10;&#10;    @GetMapping(&quot;/all-stock&quot;)&#10;    public List&lt;SupplyEntity&gt; getAllSuppliesCheckStock(@RequestHeader(&quot;Authorization&quot;) String authHeader,&#10;                                                       @RequestParam(required = false, defaultValue = &quot;true&quot;) boolean checkStock) {&#10;        String token = authHeader.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        Long userId = jwtUtil.extractUserId(token);&#10;        return supplyService.getAllSuppliesCheckStock(userId, checkStock);&#10;    }&#10;&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/dto/recipe/ProductionRequestDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/dto/recipe/ProductionRequestDto.java" />
              <option name="originalContent" value="package com.sevenb.recipes_manager.dto.recipe;&#10;&#10;import lombok.Data;&#10;&#10;@Data&#10;public class ProductionRequestDto {&#10;    private Long recipeId;&#10;    private Double quantityProduced;&#10;    private Double cost;&#10;    private String notes;&#10;    private Double recipeQuantity ; // cantidad de receta, por ejemplo : 1.5 veces la receta, 2 veces la receta, 0.5 veces la receta.&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.sevenb.recipes_manager.dto.recipe;&#10;&#10;import lombok.Data;&#10;&#10;@Data&#10;public class ProductionRequestDto {&#10;    private Long recipeId;&#10;    private Double quantityProduced;&#10;    private Double cost;&#10;    private String notes;&#10;    private Double recipeQuantity ; // cantidad de receta, por ejemplo : 1.5 veces la receta, 2 veces la receta, 0.5 veces la receta.&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/dto/recipe/RecipeInputDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/dto/recipe/RecipeInputDto.java" />
              <option name="originalContent" value="package com.sevenb.recipes_manager.dto.recipe;&#10;&#10;import lombok.Data;&#10;&#10;import java.util.Set;&#10;&#10;@Data&#10;public class RecipeInputDto {&#10;&#10;    private Long id;&#10;    private String name;&#10;    private Double quantity;&#10;    private String unit;&#10;    private Double costTotal;&#10;    private String description;&#10;    private String imageUrl;&#10;    private Boolean deleteImage;&#10;    private Long categoryId;&#10;    private Set&lt;RecipeSupplyDto&gt; ingredients;&#10;    private Set&lt;SubRecipeInputDto&gt; recipes;&#10;    private String imageBase64;&#10;    private Long userId;&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.sevenb.recipes_manager.dto.recipe;&#10;&#10;import lombok.Data;&#10;&#10;import java.util.Set;&#10;&#10;@Data&#10;public class RecipeInputDto {&#10;&#10;    private Long id;&#10;    private String name;&#10;    private Double quantity;&#10;    private String unit;&#10;    private Double costTotal;&#10;    private String description;&#10;    private String imageUrl;&#10;    private Boolean deleteImage;&#10;    private Long categoryId;&#10;    private Set&lt;RecipeSupplyDto&gt; ingredients;&#10;    private Set&lt;SubRecipeInputDto&gt; recipes;&#10;    private String imageBase64;&#10;    private Long userId;&#10;    private String expirationDate; // Expiration date&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/dto/recipe/RecipeLossDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/dto/recipe/RecipeLossDto.java" />
              <option name="updatedContent" value="package com.sevenb.recipes_manager.dto.recipe;&#10;&#10;import lombok.Data;&#10;import java.time.LocalDateTime;&#10;&#10;@Data&#10;public class RecipeLossDto {&#10;    private Long id;&#10;    private Long recipeId;&#10;    private String recipeName;&#10;    private Double quantityLost;&#10;    private String unit;&#10;    private LocalDateTime lossDate;&#10;    private String notes;&#10;    private String imageUrl;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/dto/recipe/RecipeProductionDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/dto/recipe/RecipeProductionDto.java" />
              <option name="updatedContent" value="package com.sevenb.recipes_manager.dto.recipe;&#10;&#10;import lombok.Data;&#10;import java.time.LocalDateTime;&#10;&#10;@Data&#10;public class RecipeProductionDto {&#10;    private Long id;&#10;    private Long recipeId;&#10;    private String recipeName;&#10;    private Double quantityProduced;&#10;    private String unit;&#10;    private LocalDateTime productionDate;&#10;    private Double expectedQuantity;&#10;    private Double yield;&#10;    private Double cost;&#10;    private String notes;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/entity/RecipeLoss.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/entity/RecipeLoss.java" />
              <option name="updatedContent" value="package com.sevenb.recipes_manager.entity;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;import java.time.LocalDateTime;&#10;&#10;@Entity&#10;@Table(name = &quot;recipe_loss&quot;)&#10;@Getter&#10;@Setter&#10;public class RecipeLoss {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @ManyToOne(optional = false)&#10;    @JoinColumn(name = &quot;recipe_id&quot;)&#10;    private Recipe recipe;&#10;&#10;    private Double quantityLost;&#10;    private String unit;&#10;    private LocalDateTime lossDate;&#10;    private Long userId;&#10;    private String notes;&#10;    private String imageUrl;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/entity/RecipeProduction.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/entity/RecipeProduction.java" />
              <option name="updatedContent" value="package com.sevenb.recipes_manager.entity;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;import java.time.LocalDateTime;&#10;&#10;@Entity&#10;@Table(name = &quot;recipe_production&quot;)&#10;@Getter&#10;@Setter&#10;public class RecipeProduction {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @ManyToOne(optional = false)&#10;    @JoinColumn(name = &quot;recipe_id&quot;)&#10;    private Recipe recipe;&#10;&#10;    private Double quantityProduced;&#10;    private String unit;&#10;    private LocalDateTime productionDate;&#10;    private Long userId;&#10;    private Double expectedQuantity; // cantidad teórica según receta&#10;    private Double yield; // rendimiento real (quantityProduced / expectedQuantity)&#10;    private Double cost; // costo real de la producción&#10;    private String notes; // observaciones, mermas, etc.&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/repository/DishRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/repository/DishRepository.java" />
              <option name="originalContent" value="package com.sevenb.recipes_manager.repository;&#10;&#10;import com.sevenb.recipes_manager.entity.DishEntity;&#10;import org.springframework.data.jpa.repository.EntityGraph;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface DishRepository extends JpaRepository&lt;DishEntity, Long&gt; {&#10;    @EntityGraph(attributePaths = {&#10;        &quot;dishRecipes.recipe.recipeSupplies.supply&quot;,&#10;        &quot;dishRecipes.recipe.recipeRecipeRelations.subRecipe&quot;&#10;    })&#10;    List&lt;DishEntity&gt; findAllByUserId(Long userId);&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.sevenb.recipes_manager.repository;&#10;&#10;import com.sevenb.recipes_manager.entity.DishEntity;&#10;import org.springframework.data.jpa.repository.EntityGraph;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface DishRepository extends JpaRepository&lt;DishEntity, Long&gt; {&#10;    @EntityGraph(attributePaths = {&#10;        &quot;recipes.recipe.recipeSupplies.supply&quot;,&#10;        &quot;recipes.recipe.recipeRecipeRelations.subRecipe&quot;&#10;    })&#10;    List&lt;DishEntity&gt; findAllByUserId(Long userId);&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/repository/RecipeLossRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/repository/RecipeLossRepository.java" />
              <option name="originalContent" value="package com.sevenb.recipes_manager.repository;&#10;&#10;import com.sevenb.recipes_manager.entity.RecipeLoss;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface RecipeLossRepository extends JpaRepository&lt;RecipeLoss, Long&gt; {&#10;    List&lt;RecipeLoss&gt; findAllByUserId(Long userId);&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.sevenb.recipes_manager.repository;&#10;&#10;import com.sevenb.recipes_manager.entity.RecipeLoss;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface RecipeLossRepository extends JpaRepository&lt;RecipeLoss, Long&gt; {&#10;    List&lt;RecipeLoss&gt; findAllByUserId(Long userId);&#10;    List&lt;RecipeLoss&gt; findAllByUserIdAndLossDateBetween(Long userId, LocalDateTime from, LocalDateTime to);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/repository/RecipeProductionRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/repository/RecipeProductionRepository.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.sevenb.recipes_manager.repository;&#10;&#10;import com.sevenb.recipes_manager.entity.RecipeProduction;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface RecipeProductionRepository extends JpaRepository&lt;RecipeProduction, Long&gt; {&#10;    List&lt;RecipeProduction&gt; findAllByUserId(Long userId);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/service/LossService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/service/LossService.java" />
              <option name="originalContent" value="package com.sevenb.recipes_manager.service;&#10;&#10;import com.sevenb.recipes_manager.dto.LossDTO;&#10;import com.sevenb.recipes_manager.dto.SupplyLossOutputDTO;&#10;import com.sevenb.recipes_manager.entity.SupplyLoss;&#10;import com.sevenb.recipes_manager.entity.SupplyEntity;&#10;import com.sevenb.recipes_manager.repository.LossRepository;&#10;import com.sevenb.recipes_manager.repository.SupplyRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.time.LocalDate;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;public class LossService {&#10;&#10;    @Autowired&#10;    private LossRepository lossRepository;&#10;&#10;    @Autowired&#10;    private SupplyRepository supplyRepository;&#10;&#10;    public SupplyLoss registerLoss(LossDTO dto) {&#10;        SupplyEntity supply = supplyRepository.findById(dto.getSupplyId())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Insumo no encontrado&quot;));&#10;&#10;        SupplyLoss loss = new SupplyLoss();&#10;        loss.setSupply(supply);&#10;        loss.setLostQuantity(dto.getLostQuantity());&#10;        loss.setDescription(dto.getDescription());&#10;        loss.setLossDate(dto.getLossDate());&#10;        loss.setImageUrl(dto.getImageUrl());&#10;&#10;        return lossRepository.save(loss);&#10;    }&#10;&#10;    public List&lt;SupplyLossOutputDTO&gt; findByLossDateBetween(LocalDate from,LocalDate to){&#10;&#10;&#10;        return lossRepository.findByLossDateBetween(from, to)&#10;                .stream().map(this::toSupllylossDto).collect(Collectors.toList());&#10;&#10;    }&#10;&#10;    public SupplyLossOutputDTO toSupllylossDto(SupplyLoss supplyLoss){&#10;        SupplyLossOutputDTO dto = new SupplyLossOutputDTO();&#10;        dto.setId(supplyLoss.getId());&#10;        dto.setQuantity(supplyLoss.getLostQuantity());&#10;        dto.setDescription(supplyLoss.getDescription());&#10;        dto.setSupplyName(supplyLoss.getSupply().getName());&#10;        dto.setSupplyId(supplyLoss.getSupply().getId());&#10;        dto.setLossDate(supplyLoss.getLossDate());&#10;        dto.setUnit(supplyLoss.getSupply().getUnit());&#10;        dto.setImageUrl(supplyLoss.getImageUrl());&#10;    return dto;&#10;    }&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.sevenb.recipes_manager.service;&#10;&#10;import com.sevenb.recipes_manager.dto.LossDTO;&#10;import com.sevenb.recipes_manager.dto.SupplyLossOutputDTO;&#10;import com.sevenb.recipes_manager.entity.SupplyLoss;&#10;import com.sevenb.recipes_manager.entity.SupplyEntity;&#10;import com.sevenb.recipes_manager.repository.LossRepository;&#10;import com.sevenb.recipes_manager.repository.SupplyRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.time.LocalDate;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;public class LossService {&#10;&#10;    @Autowired&#10;    private LossRepository lossRepository;&#10;&#10;    @Autowired&#10;    private SupplyRepository supplyRepository;&#10;&#10;    public SupplyLoss registerLoss(LossDTO dto) {&#10;        SupplyEntity supply = supplyRepository.findById(dto.getSupplyId())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Insumo no encontrado&quot;));&#10;&#10;        // Descontar del stock la cantidad perdida&#10;        if (supply.getStock() == null) {&#10;            supply.setStock(0.0);&#10;        }&#10;        double nuevoStock = supply.getStock() - dto.getLostQuantity();&#10;        if (nuevoStock &lt; 0) {&#10;            throw new RuntimeException(&quot;Stock insuficiente para registrar la pérdida&quot;);&#10;        }&#10;        supply.setStock(nuevoStock);&#10;        supplyRepository.save(supply);&#10;&#10;        SupplyLoss loss = new SupplyLoss();&#10;        loss.setSupply(supply);&#10;        loss.setLostQuantity(dto.getLostQuantity());&#10;        loss.setDescription(dto.getDescription());&#10;        loss.setLossDate(dto.getLossDate());&#10;        loss.setImageUrl(dto.getImageUrl());&#10;&#10;        return lossRepository.save(loss);&#10;    }&#10;&#10;    public List&lt;SupplyLossOutputDTO&gt; findByLossDateBetween(LocalDate from,LocalDate to){&#10;&#10;&#10;        return lossRepository.findByLossDateBetween(from, to)&#10;                .stream().map(this::toSupllylossDto).collect(Collectors.toList());&#10;&#10;    }&#10;&#10;    public SupplyLossOutputDTO toSupllylossDto(SupplyLoss supplyLoss){&#10;        SupplyLossOutputDTO dto = new SupplyLossOutputDTO();&#10;        dto.setId(supplyLoss.getId());&#10;        dto.setQuantity(supplyLoss.getLostQuantity());&#10;        dto.setDescription(supplyLoss.getDescription());&#10;        dto.setSupplyName(supplyLoss.getSupply().getName());&#10;        dto.setSupplyId(supplyLoss.getSupply().getId());&#10;        dto.setLossDate(supplyLoss.getLossDate());&#10;        dto.setUnit(supplyLoss.getSupply().getUnit());&#10;        dto.setImageUrl(supplyLoss.getImageUrl());&#10;    return dto;&#10;    }&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/service/RecipeLossService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/service/RecipeLossService.java" />
              <option name="originalContent" value="package com.sevenb.recipes_manager.service;&#10;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeLossDto;&#10;import com.sevenb.recipes_manager.entity.Recipe;&#10;import com.sevenb.recipes_manager.entity.RecipeLoss;&#10;import com.sevenb.recipes_manager.entity.SupplyEntity;&#10;import com.sevenb.recipes_manager.repository.RecipeLossRepository;&#10;import com.sevenb.recipes_manager.repository.RecipeRepository;&#10;import jakarta.transaction.Transactional;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.io.IOException;&#10;import java.time.LocalDateTime;&#10;import java.util.Base64;&#10;import java.util.List;&#10;&#10;@Service&#10;public class RecipeLossService {&#10;    private final RecipeLossRepository recipeLossRepository;&#10;    private final RecipeRepository recipeRepository;&#10;    private final CloudinaryService cloudinaryService;&#10;&#10;    public RecipeLossService(RecipeLossRepository recipeLossRepository,&#10;                             RecipeRepository recipeRepository,&#10;                             CloudinaryService cloudinaryService) {&#10;        this.recipeLossRepository = recipeLossRepository;&#10;        this.recipeRepository = recipeRepository;&#10;        this.cloudinaryService = cloudinaryService;&#10;    }&#10;&#10;    @Transactional&#10;    public RecipeLoss registerLoss(Long recipeId, Double recipeQuantity,&#10;                                   Long userId, String notes,&#10;                                   String imageBase64) throws IOException {&#10;&#10;        Recipe recipe = recipeRepository.findById(recipeId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Recipe not found&quot;));&#10;&#10;        double qty = recipeQuantity != null ? recipeQuantity : 1.0;&#10;&#10;&#10;        RecipeLoss loss = new RecipeLoss();&#10;        loss.setRecipe(recipe);&#10;        loss.setQuantityLost(qty);&#10;        loss.setUnit(recipe.getUnit());&#10;        loss.setLossDate(LocalDateTime.now());&#10;        loss.setUserId(userId);&#10;        loss.setNotes(notes);&#10;&#10;        if ( imageBase64!= null &amp;&amp; !imageBase64.isEmpty()) {&#10;            byte[] imageBytes = Base64.getDecoder().decode(imageBase64);&#10;            String url = cloudinaryService.upload(imageBytes);&#10;            loss.setImageUrl(url);&#10;        }&#10;&#10;        // Descontar stock de insumos con checkStock=true en base a la proporción de receta perdida&#10;        if (recipe.getRecipeSupplies() != null) {&#10;            double proporcion = qty / recipe.getQuantity(); // proporción de receta perdida respecto a la receta base&#10;            for (var recipeSupply : recipe.getRecipeSupplies()) {&#10;                SupplyEntity supply = recipeSupply.getSupply();&#10;                if (supply.isCheckStock() &amp;&amp; supply.getStock() != null) {&#10;                    // Calcular insumo a descontar según la proporción&#10;                    double cantidadDescontar = recipeSupply.getQuantity() * proporcion;&#10;                    double nuevoStock = supply.getStock() - cantidadDescontar;&#10;                    supply.setStock(nuevoStock);&#10;                }&#10;            }&#10;        }&#10;&#10;        return recipeLossRepository.save(loss);&#10;    }&#10;&#10;    public List&lt;RecipeLoss&gt; getAllLossesByUser(Long userId) {&#10;        return recipeLossRepository.findAllByUserId(userId);&#10;    }&#10;&#10;    public RecipeLossDto toDto(RecipeLoss loss) {&#10;        RecipeLossDto dto = new RecipeLossDto();&#10;        dto.setId(loss.getId());&#10;        dto.setRecipeId(loss.getRecipe().getId());&#10;        dto.setRecipeName(loss.getRecipe().getName());&#10;        dto.setQuantityLost(loss.getQuantityLost());&#10;        dto.setUnit(loss.getUnit());&#10;        dto.setLossDate(loss.getLossDate());&#10;        dto.setNotes(loss.getNotes());&#10;        dto.setImageUrl(loss.getImageUrl());&#10;        return dto;&#10;    }&#10;&#10;    public List&lt;RecipeLossDto&gt; getAllLossesByUserDto(Long userId) {&#10;        return recipeLossRepository.findAllByUserId(userId)&#10;                .stream()&#10;                .map(this::toDto)&#10;                .toList();&#10;    }&#10;    &#10;    &#10;}&#10;" />
              <option name="updatedContent" value="package com.sevenb.recipes_manager.service;&#10;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeLossDto;&#10;import com.sevenb.recipes_manager.entity.Recipe;&#10;import com.sevenb.recipes_manager.entity.RecipeLoss;&#10;import com.sevenb.recipes_manager.entity.SupplyEntity;&#10;import com.sevenb.recipes_manager.repository.RecipeLossRepository;&#10;import com.sevenb.recipes_manager.repository.RecipeRepository;&#10;import jakarta.transaction.Transactional;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.io.IOException;&#10;import java.time.LocalDateTime;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.Base64;&#10;import java.util.List;&#10;&#10;@Service&#10;public class RecipeLossService {&#10;    private final RecipeLossRepository recipeLossRepository;&#10;    private final RecipeRepository recipeRepository;&#10;    private final CloudinaryService cloudinaryService;&#10;&#10;    public RecipeLossService(RecipeLossRepository recipeLossRepository,&#10;                             RecipeRepository recipeRepository,&#10;                             CloudinaryService cloudinaryService) {&#10;        this.recipeLossRepository = recipeLossRepository;&#10;        this.recipeRepository = recipeRepository;&#10;        this.cloudinaryService = cloudinaryService;&#10;    }&#10;&#10;    @Transactional&#10;    public RecipeLoss registerLoss(Long recipeId, Double recipeQuantity,&#10;                                   Long userId, String notes,&#10;                                   String imageBase64) throws IOException {&#10;&#10;        Recipe recipe = recipeRepository.findById(recipeId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Recipe not found&quot;));&#10;&#10;        double qty = recipeQuantity != null ? recipeQuantity : 1.0;&#10;&#10;&#10;        RecipeLoss loss = new RecipeLoss();&#10;        loss.setRecipe(recipe);&#10;        loss.setQuantityLost(qty);&#10;        loss.setUnit(recipe.getUnit());&#10;        loss.setLossDate(LocalDateTime.now());&#10;        loss.setUserId(userId);&#10;        loss.setNotes(notes);&#10;&#10;        if ( imageBase64!= null &amp;&amp; !imageBase64.isEmpty()) {&#10;            byte[] imageBytes = Base64.getDecoder().decode(imageBase64);&#10;            String url = cloudinaryService.upload(imageBytes);&#10;            loss.setImageUrl(url);&#10;        }&#10;&#10;        // Descontar stock de insumos con checkStock=true en base a la proporción de receta perdida&#10;        if (recipe.getRecipeSupplies() != null) {&#10;            double proporcion = qty / recipe.getQuantity(); // proporción de receta perdida respecto a la receta base&#10;            for (var recipeSupply : recipe.getRecipeSupplies()) {&#10;                SupplyEntity supply = recipeSupply.getSupply();&#10;                if (supply.isCheckStock() &amp;&amp; supply.getStock() != null) {&#10;                    // Calcular insumo a descontar según la proporción&#10;                    double cantidadDescontar = recipeSupply.getQuantity() * proporcion;&#10;                    double nuevoStock = supply.getStock() - cantidadDescontar;&#10;                    supply.setStock(nuevoStock);&#10;                }&#10;            }&#10;        }&#10;&#10;        return recipeLossRepository.save(loss);&#10;    }&#10;&#10;    public List&lt;RecipeLoss&gt; getAllLossesByUser(Long userId) {&#10;        return recipeLossRepository.findAllByUserId(userId);&#10;    }&#10;&#10;    public RecipeLossDto toDto(RecipeLoss loss) {&#10;        RecipeLossDto dto = new RecipeLossDto();&#10;        dto.setId(loss.getId());&#10;        dto.setRecipeId(loss.getRecipe().getId());&#10;        dto.setRecipeName(loss.getRecipe().getName());&#10;        dto.setQuantityLost(loss.getQuantityLost());&#10;        dto.setUnit(loss.getUnit());&#10;        dto.setLossDate(loss.getLossDate());&#10;        dto.setNotes(loss.getNotes());&#10;        dto.setImageUrl(loss.getImageUrl());&#10;        return dto;&#10;    }&#10;&#10;    public List&lt;RecipeLossDto&gt; getAllLossesByUserDto(Long userId) {&#10;        return recipeLossRepository.findAllByUserId(userId)&#10;                .stream()&#10;                .map(this::toDto)&#10;                .toList();&#10;    }&#10;    &#10;    public List&lt;RecipeLossDto&gt; getAllLossesByUserAndDateRangeDto(Long userId, String from, String to) {&#10;        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;);&#10;        LocalDateTime fromDate = LocalDateTime.parse(from + &quot;T00:00:00&quot;);&#10;        LocalDateTime toDate = LocalDateTime.parse(to + &quot;T23:59:59&quot;);&#10;        return recipeLossRepository.findAllByUserIdAndLossDateBetween(userId, fromDate, toDate)&#10;                .stream()&#10;                .map(this::toDto)&#10;                .toList();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/service/RecipeProductionService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/service/RecipeProductionService.java" />
              <option name="originalContent" value="package com.sevenb.recipes_manager.service;&#10;&#10;import com.sevenb.recipes_manager.dto.recipe.ProductionRequestDto;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeProductionDto;&#10;import com.sevenb.recipes_manager.entity.Recipe;&#10;import com.sevenb.recipes_manager.entity.RecipeProduction;&#10;import com.sevenb.recipes_manager.entity.SupplyEntity;&#10;import com.sevenb.recipes_manager.repository.RecipeProductionRepository;&#10;import com.sevenb.recipes_manager.repository.RecipeRepository;&#10;import jakarta.transaction.Transactional;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;@Service&#10;public class RecipeProductionService {&#10;    private final RecipeProductionRepository recipeProductionRepository;&#10;    private final RecipeRepository recipeRepository;&#10;&#10;    public RecipeProductionService(RecipeProductionRepository recipeProductionRepository, RecipeRepository recipeRepository) {&#10;        this.recipeProductionRepository = recipeProductionRepository;&#10;        this.recipeRepository = recipeRepository;&#10;    }&#10;&#10;    @Transactional&#10;    public RecipeProduction registerProduction(ProductionRequestDto dto, Long userId) {&#10;        Recipe recipe = recipeRepository.findById(dto.getRecipeId())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Recipe not found&quot;));&#10;        double recipeQuantity = dto.getRecipeQuantity() != null ? dto.getRecipeQuantity() : 1.0;&#10;        // Calcular cantidad producida y esperada en base a recipeQuantity&#10;        Double quantityProduced = dto.getQuantityProduced();&#10;        Double expectedQuantity = recipe.getQuantity() * recipeQuantity;&#10;        Double yield = (expectedQuantity &gt; 0) ? quantityProduced / expectedQuantity : null;&#10;&#10;        RecipeProduction production = new RecipeProduction();&#10;        production.setRecipe(recipe);&#10;        production.setQuantityProduced(quantityProduced);&#10;        production.setUnit(recipe.getUnit());&#10;        production.setProductionDate(LocalDateTime.now());&#10;        production.setUserId(userId);&#10;        production.setExpectedQuantity(expectedQuantity);&#10;        production.setYield(yield);&#10;        production.setCost(dto.getCost());&#10;        production.setNotes(dto.getNotes());&#10;&#10;        // Descontar stock de insumos con checkStock=true en base a recipeQuantity&#10;        if (recipe.getRecipeSupplies() != null) {&#10;            for (var recipeSupply : recipe.getRecipeSupplies()) {&#10;                SupplyEntity supply = recipeSupply.getSupply();&#10;                if (supply.isCheckStock() &amp;&amp; supply.getStock() != null) {&#10;                    double cantidadDescontar = recipeSupply.getQuantity() * recipeQuantity;&#10;                    double nuevoStock = supply.getStock() - cantidadDescontar;&#10;                    supply.setStock(nuevoStock);&#10;                }&#10;            }&#10;        }&#10;&#10;        return recipeProductionRepository.save(production);&#10;    }&#10;&#10;    public List&lt;RecipeProduction&gt; getAllProductionsByUser(Long userId) {&#10;        return recipeProductionRepository.findAllByUserId(userId);&#10;    }&#10;&#10;    public RecipeProductionDto toDto(RecipeProduction production) {&#10;        RecipeProductionDto dto = new RecipeProductionDto();&#10;        dto.setId(production.getId());&#10;        dto.setRecipeId(production.getRecipe().getId());&#10;        dto.setRecipeName(production.getRecipe().getName());&#10;        dto.setQuantityProduced(production.getQuantityProduced());&#10;        dto.setUnit(production.getUnit());&#10;        dto.setProductionDate(production.getProductionDate());&#10;        dto.setExpectedQuantity(production.getExpectedQuantity());&#10;        dto.setYield(production.getYield());&#10;        dto.setCost(production.getCost());&#10;        dto.setNotes(production.getNotes());&#10;        return dto;&#10;    }&#10;&#10;    public List&lt;RecipeProductionDto&gt; getAllProductionsByUserDto(Long userId) {&#10;        return recipeProductionRepository.findAllByUserId(userId)&#10;                .stream()&#10;                .map(this::toDto)&#10;                .toList();&#10;    }&#10;&#10;    // Puedes agregar más métodos para filtrar por receta, usuario, fechas, etc.&#10;}&#10;" />
              <option name="updatedContent" value="package com.sevenb.recipes_manager.service;&#10;&#10;import com.sevenb.recipes_manager.dto.recipe.ProductionRequestDto;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeProductionDto;&#10;import com.sevenb.recipes_manager.entity.Recipe;&#10;import com.sevenb.recipes_manager.entity.RecipeProduction;&#10;import com.sevenb.recipes_manager.entity.SupplyEntity;&#10;import com.sevenb.recipes_manager.repository.RecipeProductionRepository;&#10;import com.sevenb.recipes_manager.repository.RecipeRepository;&#10;import jakarta.transaction.Transactional;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;@Service&#10;public class RecipeProductionService {&#10;    private final RecipeProductionRepository recipeProductionRepository;&#10;    private final RecipeRepository recipeRepository;&#10;&#10;    public RecipeProductionService(RecipeProductionRepository recipeProductionRepository, RecipeRepository recipeRepository) {&#10;        this.recipeProductionRepository = recipeProductionRepository;&#10;        this.recipeRepository = recipeRepository;&#10;    }&#10;&#10;    @Transactional&#10;    public RecipeProduction registerProduction(ProductionRequestDto dto, Long userId) {&#10;        Recipe recipe = recipeRepository.findById(dto.getRecipeId())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Recipe not found&quot;));&#10;        double recipeQuantity = dto.getRecipeQuantity() != null ? dto.getRecipeQuantity() : 1.0;&#10;        // Calcular cantidad producida y esperada en base a recipeQuantity&#10;        Double quantityProduced = dto.getQuantityProduced();&#10;        Double expectedQuantity = recipe.getQuantity() * recipeQuantity;&#10;        Double yield = (expectedQuantity &gt; 0) ? quantityProduced / expectedQuantity : null;&#10;&#10;        RecipeProduction production = new RecipeProduction();&#10;        production.setRecipe(recipe);&#10;        production.setQuantityProduced(quantityProduced);&#10;        production.setUnit(recipe.getUnit());&#10;        production.setProductionDate(LocalDateTime.now());&#10;        production.setUserId(userId);&#10;        production.setExpectedQuantity(expectedQuantity);&#10;        production.setYield(yield);&#10;        production.setCost(dto.getCost());&#10;        production.setNotes(dto.getNotes());&#10;&#10;        // Descontar stock de insumos con checkStock=true en base a recipeQuantity&#10;        if (recipe.getRecipeSupplies() != null) {&#10;            for (var recipeSupply : recipe.getRecipeSupplies()) {&#10;                SupplyEntity supply = recipeSupply.getSupply();&#10;                if (supply.isCheckStock() &amp;&amp; supply.getStock() != null) {&#10;                    double cantidadDescontar = recipeSupply.getQuantity() * recipeQuantity;&#10;                    double nuevoStock = supply.getStock() - cantidadDescontar;&#10;                    supply.setStock(nuevoStock);&#10;                }&#10;            }&#10;        }&#10;&#10;        return recipeProductionRepository.save(production);&#10;    }&#10;&#10;    public List&lt;RecipeProduction&gt; getAllProductionsByUser(Long userId) {&#10;        return recipeProductionRepository.findAllByUserId(userId);&#10;    }&#10;&#10;    public RecipeProductionDto toDto(RecipeProduction production) {&#10;        RecipeProductionDto dto = new RecipeProductionDto();&#10;        dto.setId(production.getId());&#10;        dto.setRecipeId(production.getRecipe().getId());&#10;        dto.setRecipeName(production.getRecipe().getName());&#10;        dto.setQuantityProduced(production.getQuantityProduced());&#10;        dto.setUnit(production.getUnit());&#10;        dto.setProductionDate(production.getProductionDate());&#10;        dto.setExpectedQuantity(production.getExpectedQuantity());&#10;        dto.setYield(production.getYield());&#10;        dto.setCost(production.getCost());&#10;        dto.setNotes(production.getNotes());&#10;        return dto;&#10;    }&#10;&#10;    public List&lt;RecipeProductionDto&gt; getAllProductionsByUserDto(Long userId) {&#10;        return recipeProductionRepository.findAllByUserId(userId)&#10;                .stream()&#10;                .map(this::toDto)&#10;                .toList();&#10;    }&#10;&#10;    // Puedes agregar más métodos para filtrar por receta, usuario, fechas, etc.&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/service/RecipeService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/service/RecipeService.java" />
              <option name="originalContent" value="package com.sevenb.recipes_manager.service;&#10;&#10;&#10;import com.sevenb.recipes_manager.Exception.CannotDeleteSupplyException;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeInputDto;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeOuputDto;&#10;import com.sevenb.recipes_manager.dto.SupplyDto;&#10;import com.sevenb.recipes_manager.dto.recipe.SubRecipeOutputDto;&#10;import com.sevenb.recipes_manager.entity.*;&#10;import com.sevenb.recipes_manager.repository.*;&#10;import jakarta.transaction.Transactional;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.dao.DataIntegrityViolationException;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.text.DecimalFormat;&#10;import java.util.HashSet;&#10;import java.util.Locale;&#10;import java.util.Set;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;public class RecipeService {&#10;&#10;    @Autowired&#10;    private RecipeRepository recipeRepository;&#10;&#10;    @Autowired&#10;    private SupplyRepository supplyRepository;&#10;&#10;    @Autowired&#10;    private RecipeSupplyRepository recipeIngredientRepository;&#10;&#10;    @Autowired&#10;    private RecipeCategoryRepository categoryRepository;&#10;&#10;    @Transactional&#10;    public RecipeOuputDto createRecipe(RecipeInputDto recipeInputDto) {&#10;&#10;        Recipe recipe = new Recipe();&#10;        recipe.setDescription(recipeInputDto.getDescription());&#10;        recipe.setName(recipeInputDto.getName().toUpperCase(Locale.ROOT));&#10;        recipe.setQuantity(recipeInputDto.getQuantity());&#10;        recipe.setUnit(recipeInputDto.getUnit());&#10;        recipe.setCategory(categoryRepository.findById(recipeInputDto.getCategoryId()).orElseThrow());&#10;        recipe.setUserId(recipeInputDto.getUserId());&#10;        recipe.setImageUrl(recipeInputDto.getImageUrl());&#10;&#10;        recipeInputDto.getIngredients().forEach(recipeSupplyDto -&gt; {&#10;            SupplyEntity supplyEntity = supplyRepository&#10;                    .findById(recipeSupplyDto.getSupplyId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Supply id: &quot; + recipeSupplyDto.getSupplyId() + &quot; not found&quot;));&#10;            RecipeSupply recipeSupply = new RecipeSupply();&#10;            recipeSupply.setRecipe(recipe);&#10;            recipeSupply.setSupply(supplyEntity);&#10;            recipeSupply.setQuantity(recipeSupplyDto.getQuantity());&#10;            recipe.getRecipeSupplies().add(recipeSupply);&#10;        });&#10;&#10;        recipeInputDto.getRecipes().forEach(recipeRecipeDto -&gt; {&#10;            Recipe subRecipe = recipeRepository&#10;                    .findById(recipeRecipeDto.getRecipeId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Supply not found&quot;));&#10;            RecipeRecipeRelationEntity recipeRecipeRelation = new RecipeRecipeRelationEntity();&#10;&#10;            recipeRecipeRelation.setRecipe(recipe);&#10;            recipeRecipeRelation.setSubRecipe(subRecipe);&#10;            recipeRecipeRelation.setQuantity(recipeRecipeDto.getQuantity());&#10;            recipe.getRecipeRecipeRelations().add(recipeRecipeRelation);&#10;        });&#10;&#10;        return toRecipeDTO(recipeRepository.save(recipe));&#10;    }&#10;&#10;    public Set&lt;RecipeOuputDto&gt; getAllRecipes(Long userId) {&#10;        Set&lt;RecipeOuputDto&gt; recipeOuputDtos = new HashSet&lt;&gt;();&#10;        recipeRepository.findAllByUserId(userId).forEach(l&#10;                -&gt; recipeOuputDtos.add(toRecipeDTOBasic(l)));&#10;        return recipeOuputDtos;&#10;    }&#10;&#10;    public RecipeOuputDto getRecipeById(Long id) {&#10;        Recipe recipe = recipeRepository.findById(id).orElseThrow(() -&gt; new RuntimeException(&quot;Recipe not found&quot;));&#10;        return toRecipeDTO(recipe);&#10;    }&#10;&#10;    @Transactional&#10;    public RecipeOuputDto updateRecipe(RecipeInputDto recipeInputDto, Long id) {&#10;        Recipe recipe = recipeRepository.findById(id)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Recipe not found&quot;));&#10;        recipe.setName(recipeInputDto.getName().toUpperCase(Locale.ROOT));&#10;        recipe.setDescription(recipeInputDto.getDescription());&#10;        recipe.setQuantity(recipeInputDto.getQuantity());&#10;        recipe.setUnit(recipeInputDto.getUnit());&#10;        // Mejor manejo de categoría: siempre buscar y setear la entidad&#10;        Category category = categoryRepository.findById(recipeInputDto.getCategoryId())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Category not found&quot;));&#10;        recipe.setCategory(category);&#10;        recipe.setImageUrl(recipeInputDto.getImageUrl());&#10;&#10;        // Limpiar y actualizar ingredientes&#10;        recipe.getRecipeSupplies().clear();&#10;        recipeInputDto.getIngredients().forEach(recipeSupplyDto -&gt; {&#10;            SupplyEntity supplyEntity = supplyRepository&#10;                    .findById(recipeSupplyDto.getSupplyId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Supply not found&quot;));&#10;            RecipeSupply recipeSupply = new RecipeSupply();&#10;            recipeSupply.setRecipe(recipe);&#10;            recipeSupply.setSupply(supplyEntity);&#10;            recipeSupply.setQuantity(recipeSupplyDto.getQuantity());&#10;            recipe.getRecipeSupplies().add(recipeSupply);&#10;        });&#10;&#10;        // Limpiar y actualizar sub-recetas&#10;        recipe.getRecipeRecipeRelations().clear();&#10;        recipeInputDto.getRecipes().forEach(recipeRecipeDto -&gt; {&#10;            Recipe subRecipe = recipeRepository&#10;                    .findById(recipeRecipeDto.getRecipeId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Sub-recipe not found&quot;));&#10;            RecipeRecipeRelationEntity relation = new RecipeRecipeRelationEntity();&#10;            relation.setRecipe(recipe);&#10;            relation.setSubRecipe(subRecipe);&#10;            relation.setQuantity(recipeRecipeDto.getQuantity());&#10;            recipe.getRecipeRecipeRelations().add(relation);&#10;        });&#10;&#10;        recipeRepository.save(recipe);&#10;        return toRecipeDTO(recipe);&#10;    }&#10;&#10;&#10;    public void deleteRecipe(Long id) {&#10;        try {&#10;            recipeRepository.deleteById(id);&#10;        } catch (DataIntegrityViolationException e) {&#10;            throw new CannotDeleteSupplyException(&quot;El insumo está siendo ocupado por algún producto final. Por favor, elimínalos primero.&quot;);&#10;        }&#10;&#10;    }&#10;&#10;    public RecipeOuputDto toRecipeDTO(Recipe recipe) {&#10;        RecipeOuputDto dto = new RecipeOuputDto();&#10;        dto.setId(recipe.getId());&#10;        dto.setName(recipe.getName());&#10;        dto.setQuantity(recipe.getQuantity());&#10;        dto.setUnit(recipe.getUnit());&#10;        dto.setCostRecipe(recipe.cost());&#10;        dto.setImageUrl(recipe.getImageUrl());&#10;        dto.setDescription(recipe.getDescription());&#10;        dto.setRecipeCategory(recipe.getCategory());&#10;&#10;        // Transformar recipeSupplies&#10;        Set&lt;SupplyDto&gt; supplies = recipe.getRecipeSupplies().stream()&#10;                .map(supply -&gt; {&#10;                    SupplyDto supplyDTO = new SupplyDto();&#10;                    supplyDTO.setName(supply.getSupply().getName());&#10;                    supplyDTO.setId(supply.getSupply().getId());&#10;                    supplyDTO.setQuantity(supply.getQuantity());&#10;                    supplyDTO.setPrice(supply.cost());&#10;                    supplyDTO.setUnit(supply.getSupply().getUnit());&#10;                    return supplyDTO;&#10;                })&#10;                .collect(Collectors.toSet());&#10;        dto.setSupplies(supplies);&#10;&#10;&#10;        Set&lt;SubRecipeOutputDto&gt; subRecipeOutputDtos = recipe.getRecipeRecipeRelations().stream()&#10;                .map(subRecipe -&gt; {&#10;                    SubRecipeOutputDto recipeOutputDto = new SubRecipeOutputDto();&#10;                    recipeOutputDto.setName(subRecipe.getSubRecipe().getName());&#10;                    recipeOutputDto.setId(subRecipe.getSubRecipe().getId());&#10;                    recipeOutputDto.setQuantity(subRecipe.getQuantity());&#10;                    recipeOutputDto.setCost(subRecipe.cost());&#10;                    recipeOutputDto.setUnit(subRecipe.getSubRecipe().getUnit());&#10;                    return recipeOutputDto;&#10;                })&#10;                .collect(Collectors.toSet());&#10;        dto.setRecipes(subRecipeOutputDtos);&#10;&#10;        return dto;&#10;    }&#10;&#10;&#10;    public RecipeOuputDto toRecipeDTOBasic(Recipe recipe) {&#10;        RecipeOuputDto dto = new RecipeOuputDto();&#10;        dto.setId(recipe.getId());&#10;        dto.setName(recipe.getName());&#10;        dto.setQuantity(recipe.getQuantity());&#10;        dto.setUnit(recipe.getUnit());&#10;        //dto.setCostRecipe(recipe.cost());&#10;        dto.setImageUrl(recipe.getImageUrl());&#10;        dto.setDescription(recipe.getDescription());&#10;        dto.setRecipeCategory(recipe.getCategory());&#10;&#10;        return dto;&#10;    }&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.sevenb.recipes_manager.service;&#10;&#10;&#10;import com.sevenb.recipes_manager.Exception.CannotDeleteSupplyException;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeInputDto;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeOuputDto;&#10;import com.sevenb.recipes_manager.dto.SupplyDto;&#10;import com.sevenb.recipes_manager.dto.recipe.SubRecipeOutputDto;&#10;import com.sevenb.recipes_manager.entity.*;&#10;import com.sevenb.recipes_manager.repository.*;&#10;import jakarta.transaction.Transactional;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.dao.DataIntegrityViolationException;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.text.DecimalFormat;&#10;import java.util.HashSet;&#10;import java.util.Locale;&#10;import java.util.Set;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;public class RecipeService {&#10;&#10;    @Autowired&#10;    private RecipeRepository recipeRepository;&#10;&#10;    @Autowired&#10;    private SupplyRepository supplyRepository;&#10;&#10;    @Autowired&#10;    private RecipeSupplyRepository recipeIngredientRepository;&#10;&#10;    @Autowired&#10;    private RecipeCategoryRepository categoryRepository;&#10;&#10;    @Transactional&#10;    public RecipeOuputDto createRecipe(RecipeInputDto recipeInputDto) {&#10;&#10;        Recipe recipe = new Recipe();&#10;        recipe.setDescription(recipeInputDto.getDescription());&#10;        recipe.setName(recipeInputDto.getName().toUpperCase(Locale.ROOT));&#10;        recipe.setQuantity(recipeInputDto.getQuantity());&#10;        recipe.setUnit(recipeInputDto.getUnit());&#10;        recipe.setCategory(categoryRepository.findById(recipeInputDto.getCategoryId()).orElseThrow());&#10;        recipe.setUserId(recipeInputDto.getUserId());&#10;        recipe.setImageUrl(recipeInputDto.getImageUrl());&#10;&#10;        recipeInputDto.getIngredients().forEach(recipeSupplyDto -&gt; {&#10;            SupplyEntity supplyEntity = supplyRepository&#10;                    .findById(recipeSupplyDto.getSupplyId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Supply id: &quot; + recipeSupplyDto.getSupplyId() + &quot; not found&quot;));&#10;            RecipeSupply recipeSupply = new RecipeSupply();&#10;            recipeSupply.setRecipe(recipe);&#10;            recipeSupply.setSupply(supplyEntity);&#10;            recipeSupply.setQuantity(recipeSupplyDto.getQuantity());&#10;            recipe.getRecipeSupplies().add(recipeSupply);&#10;        });&#10;&#10;        recipeInputDto.getRecipes().forEach(recipeRecipeDto -&gt; {&#10;            Recipe subRecipe = recipeRepository&#10;                    .findById(recipeRecipeDto.getRecipeId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Supply not found&quot;));&#10;            RecipeRecipeRelationEntity recipeRecipeRelation = new RecipeRecipeRelationEntity();&#10;&#10;            recipeRecipeRelation.setRecipe(recipe);&#10;            recipeRecipeRelation.setSubRecipe(subRecipe);&#10;            recipeRecipeRelation.setQuantity(recipeRecipeDto.getQuantity());&#10;            recipe.getRecipeRecipeRelations().add(recipeRecipeRelation);&#10;        });&#10;&#10;        return toRecipeDTO(recipeRepository.save(recipe));&#10;    }&#10;&#10;    public Set&lt;RecipeOuputDto&gt; getAllRecipes(Long userId) {&#10;        Set&lt;RecipeOuputDto&gt; recipeOuputDtos = new HashSet&lt;&gt;();&#10;        recipeRepository.findAllByUserId(userId).forEach(l&#10;                -&gt; recipeOuputDtos.add(toRecipeDTOBasic(l)));&#10;        return recipeOuputDtos;&#10;    }&#10;&#10;    public RecipeOuputDto getRecipeById(Long id) {&#10;        Recipe recipe = recipeRepository.findById(id).orElseThrow(() -&gt; new RuntimeException(&quot;Recipe not found&quot;));&#10;        return toRecipeDTO(recipe);&#10;    }&#10;&#10;    @Transactional&#10;    public RecipeOuputDto updateRecipe(RecipeInputDto recipeInputDto, Long id) {&#10;        Recipe recipe = recipeRepository.findById(id)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Recipe not found&quot;));&#10;        recipe.setName(recipeInputDto.getName().toUpperCase(Locale.ROOT));&#10;        recipe.setDescription(recipeInputDto.getDescription());&#10;        recipe.setQuantity(recipeInputDto.getQuantity());&#10;        recipe.setUnit(recipeInputDto.getUnit());&#10;        // Mejor manejo de categoría: siempre buscar y setear la entidad&#10;        Category category = categoryRepository.findById(recipeInputDto.getCategoryId())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Category not found&quot;));&#10;        recipe.setCategory(category);&#10;        recipe.setImageUrl(recipeInputDto.getImageUrl());&#10;&#10;        // Limpiar y actualizar ingredientes&#10;        recipe.getRecipeSupplies().clear();&#10;        recipeInputDto.getIngredients().forEach(recipeSupplyDto -&gt; {&#10;            SupplyEntity supplyEntity = supplyRepository&#10;                    .findById(recipeSupplyDto.getSupplyId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Supply not found&quot;));&#10;            RecipeSupply recipeSupply = new RecipeSupply();&#10;            recipeSupply.setRecipe(recipe);&#10;            recipeSupply.setSupply(supplyEntity);&#10;            recipeSupply.setQuantity(recipeSupplyDto.getQuantity());&#10;            recipe.getRecipeSupplies().add(recipeSupply);&#10;        });&#10;&#10;        // Limpiar y actualizar sub-recetas&#10;        recipe.getRecipeRecipeRelations().clear();&#10;        recipeInputDto.getRecipes().forEach(recipeRecipeDto -&gt; {&#10;            Recipe subRecipe = recipeRepository&#10;                    .findById(recipeRecipeDto.getRecipeId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Sub-recipe not found&quot;));&#10;            RecipeRecipeRelationEntity relation = new RecipeRecipeRelationEntity();&#10;            relation.setRecipe(recipe);&#10;            relation.setSubRecipe(subRecipe);&#10;            relation.setQuantity(recipeRecipeDto.getQuantity());&#10;            recipe.getRecipeRecipeRelations().add(relation);&#10;        });&#10;&#10;        recipeRepository.save(recipe);&#10;        return toRecipeDTO(recipe);&#10;    }&#10;&#10;&#10;    public void deleteRecipe(Long id) {&#10;        try {&#10;            recipeRepository.deleteById(id);&#10;        } catch (DataIntegrityViolationException e) {&#10;            throw new CannotDeleteSupplyException(&quot;El insumo está siendo ocupado por algún producto final. Por favor, elimínalos primero.&quot;);&#10;        }&#10;&#10;    }&#10;&#10;    public RecipeOuputDto toRecipeDTO(Recipe recipe) {&#10;        RecipeOuputDto dto = new RecipeOuputDto();&#10;        dto.setId(recipe.getId());&#10;        dto.setName(recipe.getName());&#10;        dto.setQuantity(recipe.getQuantity());&#10;        dto.setUnit(recipe.getUnit());&#10;        dto.setCostRecipe(recipe.cost());&#10;        dto.setImageUrl(recipe.getImageUrl());&#10;        dto.setDescription(recipe.getDescription());&#10;        dto.setRecipeCategory(recipe.getCategory());&#10;&#10;        // Transformar recipeSupplies&#10;        Set&lt;SupplyDto&gt; supplies = recipe.getRecipeSupplies().stream()&#10;                .map(supply -&gt; {&#10;                    SupplyDto supplyDTO = new SupplyDto();&#10;                    supplyDTO.setName(supply.getSupply().getName());&#10;                    supplyDTO.setId(supply.getSupply().getId());&#10;                    supplyDTO.setQuantity(supply.getQuantity());&#10;                    supplyDTO.setPrice(supply.cost());&#10;                    supplyDTO.setUnit(supply.getSupply().getUnit());&#10;                    return supplyDTO;&#10;                })&#10;                .collect(Collectors.toSet());&#10;        dto.setSupplies(supplies);&#10;&#10;&#10;        Set&lt;SubRecipeOutputDto&gt; subRecipeOutputDtos = recipe.getRecipeRecipeRelations().stream()&#10;                .map(subRecipe -&gt; {&#10;                    SubRecipeOutputDto recipeOutputDto = new SubRecipeOutputDto();&#10;                    recipeOutputDto.setName(subRecipe.getSubRecipe().getName());&#10;                    recipeOutputDto.setId(subRecipe.getSubRecipe().getId());&#10;                    recipeOutputDto.setQuantity(subRecipe.getQuantity());&#10;                    recipeOutputDto.setCost(subRecipe.cost());&#10;                    recipeOutputDto.setUnit(subRecipe.getSubRecipe().getUnit());&#10;                    return recipeOutputDto;&#10;                })&#10;                .collect(Collectors.toSet());&#10;        dto.setRecipes(subRecipeOutputDtos);&#10;&#10;        return dto;&#10;    }&#10;&#10;&#10;    public RecipeOuputDto toRecipeDTOBasic(Recipe recipe) {&#10;        RecipeOuputDto dto = new RecipeOuputDto();&#10;        dto.setId(recipe.getId());&#10;        dto.setName(recipe.getName());&#10;        dto.setQuantity(recipe.getQuantity());&#10;        dto.setUnit(recipe.getUnit());&#10;        //dto.setCostRecipe(recipe.cost());&#10;        dto.setImageUrl(recipe.getImageUrl());&#10;        dto.setDescription(recipe.getDescription());&#10;        dto.setRecipeCategory(recipe.getCategory());&#10;&#10;        return dto;&#10;    }&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/service/SupplyService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/service/SupplyService.java" />
              <option name="originalContent" value="package com.sevenb.recipes_manager.service;&#10;&#10;import com.sevenb.recipes_manager.Exception.CannotDeleteSupplyException;&#10;import com.sevenb.recipes_manager.entity.StockMovement;&#10;import com.sevenb.recipes_manager.entity.SupplyEntity;&#10;import com.sevenb.recipes_manager.repository.StockMovementRepository;&#10;import com.sevenb.recipes_manager.repository.SupplyRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.dao.DataIntegrityViolationException;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.Locale;&#10;import java.util.Optional;&#10;&#10;@Service&#10;public class SupplyService {&#10;&#10;    private final SupplyRepository supplyRepository;&#10;    private final StockMovementRepository movementRepository;&#10;&#10;&#10;    public SupplyService (SupplyRepository supplyRepository, StockMovementRepository stockMovementRepository) {&#10;        this.supplyRepository = supplyRepository;&#10;        this.movementRepository = stockMovementRepository;&#10;    }&#10;&#10;    public List&lt;SupplyEntity&gt; getAllSupplies(Long userId) {&#10;        return supplyRepository.findAllByUserId(userId);&#10;    }&#10;&#10;    public List&lt;SupplyEntity&gt; getAllSuppliesCheckStock(Long userId, boolean checkStock) {&#10;        return supplyRepository.findAllByUserIdAndCheckStock(userId, checkStock);&#10;    }&#10;&#10;&#10;    public SupplyEntity getSupplyById(Long id) {&#10;        return supplyRepository.findById(id).orElse(null);&#10;    }&#10;&#10;    public SupplyEntity saveSupply(SupplyEntity supply) {&#10;        supply.setName(supply.getName().toUpperCase(Locale.ROOT));&#10;        return supplyRepository.save(supply);&#10;    }&#10;&#10;    public SupplyEntity updateSupply(Long id, SupplyEntity supplyDetails) {&#10;        SupplyEntity supply = supplyRepository.findById(id).orElseThrow(() -&gt; new RuntimeException(&quot;Supply not found with id: &quot; + id));&#10;            supply.setName(supplyDetails.getName().toUpperCase(Locale.ROOT));&#10;            supply.setQuantity(supplyDetails.getQuantity());&#10;            supply.setPrice(supplyDetails.getPrice());&#10;            supply.setUnit(supplyDetails.getUnit());&#10;            supply.setDescription(supplyDetails.getDescription());&#10;            supply.setWastage(supplyDetails.getWastage());&#10;            supply.setCategory(supplyDetails.getCategory());&#10;            supply.setMinStock(supplyDetails.getMinStock());&#10;            supply.setMaxStock(supplyDetails.getMaxStock());&#10;            supply.setCheckStock(supplyDetails.isCheckStock());&#10;         return supplyRepository.save(supply);&#10;    }&#10;&#10;&#10;    public void deleteSupply(Long id) {&#10;try{&#10;    supplyRepository.deleteById(id);&#10;  } catch (DataIntegrityViolationException e) {&#10;        // Esto atrapa errores de constraint (relaciones con productos)&#10;        throw new CannotDeleteSupplyException(&quot;El insumo está siendo ocupado por algún producto o producto final. Por favor, elimínalos primero.&quot;);&#10;    }&#10;&#10;    }&#10;&#10;    public List&lt;SupplyEntity&gt; searchByName(String name) {&#10;        return supplyRepository.findByNameContainingIgnoreCase(name);&#10;    }&#10;&#10;    public Optional&lt;SupplyEntity&gt; adjustStock(Long id, double quantity, String type, String reason) {&#10;        return supplyRepository.findById(id).map(s -&gt; {&#10;            if (s.getStock() == null) {&#10;                s.setStock(0.0);&#10;            }&#10;            double newStock = s.getStock() + quantity;&#10;            if (newStock &lt; 0) throw new IllegalArgumentException(&quot;Stock insuficiente&quot;);&#10;            s.setStock(newStock);&#10;            if (type.equalsIgnoreCase(&quot;ENTRADA&quot;)) {&#10;                s.setLastRestocked(LocalDateTime.now());&#10;            }&#10;            supplyRepository.save(s);&#10;&#10;            // registrar movimiento&#10;            StockMovement movement = new StockMovement();&#10;            movement.setSupply(s);&#10;            movement.setDate(LocalDateTime.now());&#10;            movement.setQuantity(Math.abs(quantity));&#10;            movement.setType(type);&#10;            movement.setReason(reason);&#10;            movementRepository.save(movement);&#10;&#10;            return s;&#10;        });&#10;    }&#10;&#10;    public List&lt;SupplyEntity&gt; getLowStockSupplies() {&#10;        return supplyRepository.findLowStockSupplies();&#10;    }&#10;&#10;    public List&lt;StockMovement&gt; getMovementsBySupply(Long supplyId) {&#10;        return movementRepository.findBySupplyId(supplyId);&#10;    }&#10;&#10;    public List&lt;SupplyEntity&gt; getLowStockSuppliesByUserAndCheckStock(Long userId) {&#10;        // Devuelve supplies del usuario con checkStock=true y stock &lt;= minStock&#10;        return supplyRepository.findAllByUserId(userId).stream()&#10;                .filter(s -&gt; Boolean.TRUE.equals(s.isCheckStock()) &amp;&amp; s.getStock() != null &amp;&amp; s.getMinStock() != null &amp;&amp; s.getStock() &lt;= s.getMinStock())&#10;                .toList();&#10;    }&#10;&#10;    public List&lt;SupplyEntity&gt; getLowStockSuppliesByUserAndCheckStockAndDate(Long userId, String from, String to) {&#10;        // Filtra supplies por userId, checkStock=true, stock &lt;= minStock y lastRestocked entre from y to&#10;        java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;);&#10;        java.time.LocalDateTime fromDate = java.time.LocalDate.parse(from, formatter).atStartOfDay();&#10;        java.time.LocalDateTime toDate = java.time.LocalDate.parse(to, formatter).atTime(23, 59, 59);&#10;        return supplyRepository.findAllByUserId(userId).stream()&#10;                .filter(s -&gt; Boolean.TRUE.equals(s.isCheckStock())&#10;                        &amp;&amp; s.getStock() != null&#10;                        &amp;&amp; s.getMinStock() != null&#10;                        &amp;&amp; s.getStock() &lt;= s.getMinStock()&#10;                        &amp;&amp; s.getLastRestocked() != null&#10;                        &amp;&amp; (s.getLastRestocked().isEqual(fromDate) || s.getLastRestocked().isAfter(fromDate))&#10;                        &amp;&amp; (s.getLastRestocked().isEqual(toDate) || s.getLastRestocked().isBefore(toDate))&#10;                )&#10;                .toList();&#10;    }&#10;&#10;&#10;}" />
              <option name="updatedContent" value="package com.sevenb.recipes_manager.service;&#10;&#10;import com.sevenb.recipes_manager.Exception.CannotDeleteSupplyException;&#10;import com.sevenb.recipes_manager.entity.StockMovement;&#10;import com.sevenb.recipes_manager.entity.SupplyEntity;&#10;import com.sevenb.recipes_manager.repository.StockMovementRepository;&#10;import com.sevenb.recipes_manager.repository.SupplyRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.dao.DataIntegrityViolationException;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.Locale;&#10;import java.util.Optional;&#10;&#10;@Service&#10;public class SupplyService {&#10;&#10;    private final SupplyRepository supplyRepository;&#10;    private final StockMovementRepository movementRepository;&#10;&#10;&#10;    public SupplyService (SupplyRepository supplyRepository, StockMovementRepository stockMovementRepository) {&#10;        this.supplyRepository = supplyRepository;&#10;        this.movementRepository = stockMovementRepository;&#10;    }&#10;&#10;    public List&lt;SupplyEntity&gt; getAllSupplies(Long userId) {&#10;        return supplyRepository.findAllByUserId(userId);&#10;    }&#10;&#10;    public List&lt;SupplyEntity&gt; getAllSuppliesCheckStock(Long userId, boolean checkStock) {&#10;        return supplyRepository.findAllByUserIdAndCheckStock(userId, checkStock);&#10;    }&#10;&#10;&#10;    public SupplyEntity getSupplyById(Long id) {&#10;        return supplyRepository.findById(id).orElse(null);&#10;    }&#10;&#10;    public SupplyEntity saveSupply(SupplyEntity supply) {&#10;        supply.setName(supply.getName().toUpperCase(Locale.ROOT));&#10;        return supplyRepository.save(supply);&#10;    }&#10;&#10;    public SupplyEntity updateSupply(Long id, SupplyEntity supplyDetails) {&#10;        SupplyEntity supply = supplyRepository.findById(id).orElseThrow(() -&gt; new RuntimeException(&quot;Supply not found with id: &quot; + id));&#10;            supply.setName(supplyDetails.getName().toUpperCase(Locale.ROOT));&#10;            supply.setQuantity(supplyDetails.getQuantity());&#10;            supply.setPrice(supplyDetails.getPrice());&#10;            supply.setUnit(supplyDetails.getUnit());&#10;            supply.setDescription(supplyDetails.getDescription());&#10;            supply.setWastage(supplyDetails.getWastage());&#10;            supply.setCategory(supplyDetails.getCategory());&#10;            supply.setMinStock(supplyDetails.getMinStock());&#10;            supply.setMaxStock(supplyDetails.getMaxStock());&#10;            supply.setCheckStock(supplyDetails.isCheckStock());&#10;         return supplyRepository.save(supply);&#10;    }&#10;&#10;&#10;    public void deleteSupply(Long id) {&#10;try{&#10;    supplyRepository.deleteById(id);&#10;  } catch (DataIntegrityViolationException e) {&#10;        // Esto atrapa errores de constraint (relaciones con productos)&#10;        throw new CannotDeleteSupplyException(&quot;El insumo está siendo ocupado por algún producto o producto final. Por favor, elimínalos primero.&quot;);&#10;    }&#10;&#10;    }&#10;&#10;    public List&lt;SupplyEntity&gt; searchByName(String name) {&#10;        return supplyRepository.findByNameContainingIgnoreCase(name);&#10;    }&#10;&#10;    public Optional&lt;SupplyEntity&gt; adjustStock(Long id, double quantity, String type, String reason) {&#10;        return supplyRepository.findById(id).map(s -&gt; {&#10;            if (s.getStock() == null) {&#10;                s.setStock(0.0);&#10;            }&#10;            double newStock = s.getStock() + quantity;&#10;            if (newStock &lt; 0) throw new IllegalArgumentException(&quot;Stock insuficiente&quot;);&#10;            s.setStock(newStock);&#10;            if (type.equalsIgnoreCase(&quot;ENTRADA&quot;)) {&#10;                s.setLastRestocked(LocalDateTime.now());&#10;            }&#10;            supplyRepository.save(s);&#10;&#10;            // registrar movimiento&#10;            StockMovement movement = new StockMovement();&#10;            movement.setSupply(s);&#10;            movement.setDate(LocalDateTime.now());&#10;            movement.setQuantity(Math.abs(quantity));&#10;            movement.setType(type);&#10;            movement.setReason(reason);&#10;            movementRepository.save(movement);&#10;&#10;            return s;&#10;        });&#10;    }&#10;&#10;    public List&lt;SupplyEntity&gt; getLowStockSupplies() {&#10;        return supplyRepository.findLowStockSupplies();&#10;    }&#10;&#10;    public List&lt;StockMovement&gt; getMovementsBySupply(Long supplyId) {&#10;        return movementRepository.findBySupplyId(supplyId);&#10;    }&#10;&#10;    public List&lt;SupplyEntity&gt; getLowStockSuppliesByUserAndCheckStock(Long userId) {&#10;        // Devuelve supplies del usuario con checkStock=true y stock &lt;= minStock&#10;        return supplyRepository.findAllByUserId(userId).stream()&#10;                .filter(s -&gt; Boolean.TRUE.equals(s.isCheckStock()) &amp;&amp; s.getStock() != null &amp;&amp; s.getMinStock() != null &amp;&amp; s.getStock() &lt;= s.getMinStock())&#10;                .toList();&#10;    }&#10;&#10;    public List&lt;SupplyEntity&gt; getLowStockSuppliesByUserAndCheckStockAndDate(Long userId, String from, String to) {&#10;        // Filtra supplies por userId, checkStock=true, stock &lt;= minStock y lastRestocked entre from y to&#10;        java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;);&#10;        java.time.LocalDateTime fromDate = java.time.LocalDate.parse(from, formatter).atStartOfDay();&#10;        java.time.LocalDateTime toDate = java.time.LocalDate.parse(to, formatter).atTime(23, 59, 59);&#10;        return supplyRepository.findAllByUserId(userId).stream()&#10;                .filter(s -&gt; Boolean.TRUE.equals(s.isCheckStock())&#10;                        &amp;&amp; s.getStock() != null&#10;                        &amp;&amp; s.getMinStock() != null&#10;                        &amp;&amp; s.getStock() &lt;= s.getMinStock()&#10;                        &amp;&amp; s.getLastRestocked() != null&#10;                        &amp;&amp; (s.getLastRestocked().isEqual(fromDate) || s.getLastRestocked().isAfter(fromDate))&#10;                        &amp;&amp; (s.getLastRestocked().isEqual(toDate) || s.getLastRestocked().isBefore(toDate))&#10;                )&#10;                .toList();&#10;    }&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/db/migration/V1__create_recipe_production.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/db/migration/V1__create_recipe_production.sql" />
              <option name="updatedContent" value="CREATE TABLE recipe_production (&#10;    id SERIAL PRIMARY KEY,&#10;    recipe_id BIGINT NOT NULL REFERENCES recipes(id),&#10;    quantity_produced DOUBLE PRECISION,&#10;    unit VARCHAR(50),&#10;    production_date TIMESTAMP,&#10;    user_id BIGINT,&#10;    expected_quantity DOUBLE PRECISION,&#10;    yield DOUBLE PRECISION,&#10;    cost DOUBLE PRECISION,&#10;    notes VARCHAR(255)&#10;);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/db/migration/V2__create_recipe_loss.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/db/migration/V2__create_recipe_loss.sql" />
              <option name="updatedContent" value="CREATE TABLE recipe_loss (&#10;    id SERIAL PRIMARY KEY,&#10;    recipe_id BIGINT NOT NULL REFERENCES recipes(id),&#10;    quantity_lost DOUBLE PRECISION,&#10;    unit VARCHAR(50),&#10;    loss_date TIMESTAMP,&#10;    user_id BIGINT,&#10;    notes VARCHAR(255),&#10;    image_url VARCHAR(255)&#10;);" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>