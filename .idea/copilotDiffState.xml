<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/service/RecipeService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sevenb/recipes_manager/service/RecipeService.java" />
              <option name="originalContent" value="package com.sevenb.recipes_manager.service;&#10;&#10;&#10;import com.sevenb.recipes_manager.Exception.CannotDeleteSupplyException;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeInputDto;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeOuputDto;&#10;import com.sevenb.recipes_manager.dto.SupplyDto;&#10;import com.sevenb.recipes_manager.dto.recipe.SubRecipeOutputDto;&#10;import com.sevenb.recipes_manager.entity.*;&#10;import com.sevenb.recipes_manager.repository.*;&#10;import jakarta.transaction.Transactional;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.dao.DataIntegrityViolationException;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.text.DecimalFormat;&#10;import java.util.HashSet;&#10;import java.util.Locale;&#10;import java.util.Set;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;public class RecipeService {&#10;&#10;    @Autowired&#10;    private RecipeRepository recipeRepository;&#10;&#10;    @Autowired&#10;    private SupplyRepository supplyRepository;&#10;&#10;    @Autowired&#10;    private RecipeSupplyRepository recipeIngredientRepository;&#10;&#10;    @Autowired&#10;    private RecipeCategoryRepository categoryRepository;&#10;&#10;    @Transactional&#10;    public RecipeOuputDto createRecipe(RecipeInputDto recipeInputDto) {&#10;&#10;        Recipe recipe = new Recipe();&#10;        recipe.setDescription(recipeInputDto.getDescription());&#10;        recipe.setName(recipeInputDto.getName().toUpperCase(Locale.ROOT));&#10;        recipe.setQuantity(recipeInputDto.getQuantity());&#10;        recipe.setUnit(recipeInputDto.getUnit());&#10;        recipe.setCategory(categoryRepository.findById(recipeInputDto.getCategoryId()).orElseThrow());&#10;        recipe.setUserId(recipeInputDto.getUserId());&#10;        recipe.setImageUrl(recipeInputDto.getImageUrl());&#10;&#10;        recipeInputDto.getIngredients().forEach(recipeSupplyDto -&gt; {&#10;            SupplyEntity supplyEntity = supplyRepository&#10;                    .findById(recipeSupplyDto.getSupplyId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Supply id: &quot; + recipeSupplyDto.getSupplyId() + &quot; not found&quot;));&#10;            RecipeSupply recipeSupply = new RecipeSupply();&#10;            recipeSupply.setRecipe(recipe);&#10;            recipeSupply.setSupply(supplyEntity);&#10;            recipeSupply.setQuantity(recipeSupplyDto.getQuantity());&#10;            recipe.getRecipeSupplies().add(recipeSupply);&#10;        });&#10;&#10;        recipeInputDto.getRecipes().forEach(recipeRecipeDto -&gt; {&#10;            Recipe subRecipe = recipeRepository&#10;                    .findById(recipeRecipeDto.getRecipeId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Supply not found&quot;));&#10;            RecipeRecipeRelationEntity recipeRecipeRelation = new RecipeRecipeRelationEntity();&#10;&#10;            recipeRecipeRelation.setRecipe(recipe);&#10;            recipeRecipeRelation.setSubRecipe(subRecipe);&#10;            recipeRecipeRelation.setQuantity(recipeRecipeDto.getQuantity());&#10;            recipe.getRecipeRecipeRelations().add(recipeRecipeRelation);&#10;        });&#10;&#10;        return toRecipeDTO(recipeRepository.save(recipe));&#10;    }&#10;&#10;    public Set&lt;RecipeOuputDto&gt; getAllRecipes(Long userId) {&#10;        Set&lt;RecipeOuputDto&gt; recipeOuputDtos = new HashSet&lt;&gt;();&#10;        recipeRepository.findAllByUserId(userId).forEach(l&#10;                -&gt; recipeOuputDtos.add(toRecipeDTOBasic(l)));&#10;        return recipeOuputDtos;&#10;    }&#10;&#10;    public RecipeOuputDto getRecipeById(Long id) {&#10;        Recipe recipe = recipeRepository.findById(id).orElseThrow(() -&gt; new RuntimeException(&quot;Recipe not found&quot;));&#10;        return toRecipeDTO(recipe);&#10;    }&#10;&#10;    @Transactional&#10;    public RecipeOuputDto updateRecipe(RecipeInputDto recipeInputDto, Long id) {&#10;        Recipe recipe = recipeRepository.findById(id)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Recipe not found&quot;));&#10;        recipe.setName(recipeInputDto.getName().toUpperCase(Locale.ROOT));&#10;        recipe.setDescription(recipeInputDto.getDescription());&#10;        recipe.setQuantity(recipeInputDto.getQuantity());&#10;        recipe.setUnit(recipeInputDto.getUnit());&#10;        // Mejor manejo de categoría: siempre buscar y setear la entidad&#10;        Category category = categoryRepository.findById(recipeInputDto.getCategoryId())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Category not found&quot;));&#10;        recipe.setCategory(category);&#10;        recipe.setImageUrl(recipeInputDto.getImageUrl());&#10;&#10;        // Limpiar y actualizar ingredientes&#10;        recipe.getRecipeSupplies().clear();&#10;        recipeInputDto.getIngredients().forEach(recipeSupplyDto -&gt; {&#10;            SupplyEntity supplyEntity = supplyRepository&#10;                    .findById(recipeSupplyDto.getSupplyId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Supply not found&quot;));&#10;            RecipeSupply recipeSupply = new RecipeSupply();&#10;            recipeSupply.setRecipe(recipe);&#10;            recipeSupply.setSupply(supplyEntity);&#10;            recipeSupply.setQuantity(recipeSupplyDto.getQuantity());&#10;            recipe.getRecipeSupplies().add(recipeSupply);&#10;        });&#10;&#10;        // Limpiar y actualizar sub-recetas&#10;        recipe.getRecipeRecipeRelations().clear();&#10;        recipeInputDto.getRecipes().forEach(recipeRecipeDto -&gt; {&#10;            Recipe subRecipe = recipeRepository&#10;                    .findById(recipeRecipeDto.getRecipeId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Sub-recipe not found&quot;));&#10;            RecipeRecipeRelationEntity relation = new RecipeRecipeRelationEntity();&#10;            relation.setRecipe(recipe);&#10;            relation.setSubRecipe(subRecipe);&#10;            relation.setQuantity(recipeRecipeDto.getQuantity());&#10;            recipe.getRecipeRecipeRelations().add(relation);&#10;        });&#10;&#10;        recipeRepository.save(recipe);&#10;        return toRecipeDTO(recipe);&#10;    }&#10;&#10;&#10;    public void deleteRecipe(Long id) {&#10;        try {&#10;            recipeRepository.deleteById(id);&#10;        } catch (DataIntegrityViolationException e) {&#10;            throw new CannotDeleteSupplyException(&quot;El insumo está siendo ocupado por algún producto final. Por favor, elimínalos primero.&quot;);&#10;        }&#10;&#10;    }&#10;&#10;    public RecipeOuputDto toRecipeDTO(Recipe recipe) {&#10;        RecipeOuputDto dto = new RecipeOuputDto();&#10;        dto.setId(recipe.getId());&#10;        dto.setName(recipe.getName());&#10;        dto.setQuantity(recipe.getQuantity());&#10;        dto.setUnit(recipe.getUnit());&#10;        dto.setCostRecipe(recipe.cost());&#10;        dto.setImageUrl(recipe.getImageUrl());&#10;        dto.setDescription(recipe.getDescription());&#10;        dto.setRecipeCategory(recipe.getCategory());&#10;&#10;        // Transformar recipeSupplies&#10;        Set&lt;SupplyDto&gt; supplies = recipe.getRecipeSupplies().stream()&#10;                .map(supply -&gt; {&#10;                    SupplyDto supplyDTO = new SupplyDto();&#10;                    supplyDTO.setName(supply.getSupply().getName());&#10;                    supplyDTO.setId(supply.getSupply().getId());&#10;                    supplyDTO.setQuantity(supply.getQuantity());&#10;                    supplyDTO.setPrice(supply.cost());&#10;                    supplyDTO.setUnit(supply.getSupply().getUnit());&#10;                    return supplyDTO;&#10;                })&#10;                .collect(Collectors.toSet());&#10;        dto.setSupplies(supplies);&#10;&#10;&#10;        Set&lt;SubRecipeOutputDto&gt; subRecipeOutputDtos = recipe.getRecipeRecipeRelations().stream()&#10;                .map(subRecipe -&gt; {&#10;                    SubRecipeOutputDto recipeOutputDto = new SubRecipeOutputDto();&#10;                    recipeOutputDto.setName(subRecipe.getSubRecipe().getName());&#10;                    recipeOutputDto.setId(subRecipe.getSubRecipe().getId());&#10;                    recipeOutputDto.setQuantity(subRecipe.getQuantity());&#10;                    recipeOutputDto.setCost(subRecipe.cost());&#10;                    recipeOutputDto.setUnit(subRecipe.getSubRecipe().getUnit());&#10;                    return recipeOutputDto;&#10;                })&#10;                .collect(Collectors.toSet());&#10;        dto.setRecipes(subRecipeOutputDtos);&#10;&#10;        return dto;&#10;    }&#10;&#10;&#10;    public RecipeOuputDto toRecipeDTOBasic(Recipe recipe) {&#10;        RecipeOuputDto dto = new RecipeOuputDto();&#10;        dto.setId(recipe.getId());&#10;        dto.setName(recipe.getName());&#10;        dto.setQuantity(recipe.getQuantity());&#10;        dto.setUnit(recipe.getUnit());&#10;        //dto.setCostRecipe(recipe.cost());&#10;        dto.setImageUrl(recipe.getImageUrl());&#10;        dto.setDescription(recipe.getDescription());&#10;        dto.setRecipeCategory(recipe.getCategory());&#10;&#10;        return dto;&#10;    }&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.sevenb.recipes_manager.service;&#10;&#10;&#10;import com.sevenb.recipes_manager.Exception.CannotDeleteSupplyException;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeInputDto;&#10;import com.sevenb.recipes_manager.dto.recipe.RecipeOuputDto;&#10;import com.sevenb.recipes_manager.dto.SupplyDto;&#10;import com.sevenb.recipes_manager.dto.recipe.SubRecipeOutputDto;&#10;import com.sevenb.recipes_manager.entity.*;&#10;import com.sevenb.recipes_manager.repository.*;&#10;import jakarta.transaction.Transactional;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.dao.DataIntegrityViolationException;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.text.DecimalFormat;&#10;import java.util.HashSet;&#10;import java.util.Locale;&#10;import java.util.Set;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;public class RecipeService {&#10;&#10;    @Autowired&#10;    private RecipeRepository recipeRepository;&#10;&#10;    @Autowired&#10;    private SupplyRepository supplyRepository;&#10;&#10;    @Autowired&#10;    private RecipeSupplyRepository recipeIngredientRepository;&#10;&#10;    @Autowired&#10;    private RecipeCategoryRepository categoryRepository;&#10;&#10;    @Transactional&#10;    public RecipeOuputDto createRecipe(RecipeInputDto recipeInputDto) {&#10;&#10;        Recipe recipe = new Recipe();&#10;        recipe.setDescription(recipeInputDto.getDescription());&#10;        recipe.setName(recipeInputDto.getName().toUpperCase(Locale.ROOT));&#10;        recipe.setQuantity(recipeInputDto.getQuantity());&#10;        recipe.setUnit(recipeInputDto.getUnit());&#10;        recipe.setCategory(categoryRepository.findById(recipeInputDto.getCategoryId()).orElseThrow());&#10;        recipe.setUserId(recipeInputDto.getUserId());&#10;        recipe.setImageUrl(recipeInputDto.getImageUrl());&#10;&#10;        recipeInputDto.getIngredients().forEach(recipeSupplyDto -&gt; {&#10;            SupplyEntity supplyEntity = supplyRepository&#10;                    .findById(recipeSupplyDto.getSupplyId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Supply id: &quot; + recipeSupplyDto.getSupplyId() + &quot; not found&quot;));&#10;            RecipeSupply recipeSupply = new RecipeSupply();&#10;            recipeSupply.setRecipe(recipe);&#10;            recipeSupply.setSupply(supplyEntity);&#10;            recipeSupply.setQuantity(recipeSupplyDto.getQuantity());&#10;            recipe.getRecipeSupplies().add(recipeSupply);&#10;        });&#10;&#10;        recipeInputDto.getRecipes().forEach(recipeRecipeDto -&gt; {&#10;            Recipe subRecipe = recipeRepository&#10;                    .findById(recipeRecipeDto.getRecipeId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Supply not found&quot;));&#10;            RecipeRecipeRelationEntity recipeRecipeRelation = new RecipeRecipeRelationEntity();&#10;&#10;            recipeRecipeRelation.setRecipe(recipe);&#10;            recipeRecipeRelation.setSubRecipe(subRecipe);&#10;            recipeRecipeRelation.setQuantity(recipeRecipeDto.getQuantity());&#10;            recipe.getRecipeRecipeRelations().add(recipeRecipeRelation);&#10;        });&#10;&#10;        return toRecipeDTO(recipeRepository.save(recipe));&#10;    }&#10;&#10;    public Set&lt;RecipeOuputDto&gt; getAllRecipes(Long userId) {&#10;        Set&lt;RecipeOuputDto&gt; recipeOuputDtos = new HashSet&lt;&gt;();&#10;        recipeRepository.findAllByUserId(userId).forEach(l&#10;                -&gt; recipeOuputDtos.add(toRecipeDTOBasic(l)));&#10;        return recipeOuputDtos;&#10;    }&#10;&#10;    public RecipeOuputDto getRecipeById(Long id) {&#10;        Recipe recipe = recipeRepository.findById(id).orElseThrow(() -&gt; new RuntimeException(&quot;Recipe not found&quot;));&#10;        return toRecipeDTO(recipe);&#10;    }&#10;&#10;    @Transactional&#10;    public RecipeOuputDto updateRecipe(RecipeInputDto recipeInputDto, Long id) {&#10;        Recipe recipe = recipeRepository.findById(id)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Recipe not found&quot;));&#10;        recipe.setName(recipeInputDto.getName().toUpperCase(Locale.ROOT));&#10;        recipe.setDescription(recipeInputDto.getDescription());&#10;        recipe.setQuantity(recipeInputDto.getQuantity());&#10;        recipe.setUnit(recipeInputDto.getUnit());&#10;        // Mejor manejo de categoría: siempre buscar y setear la entidad&#10;        Category category = categoryRepository.findById(recipeInputDto.getCategoryId())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Category not found&quot;));&#10;        recipe.setCategory(category);&#10;        recipe.setImageUrl(recipeInputDto.getImageUrl());&#10;&#10;        // Limpiar y actualizar ingredientes&#10;        recipe.getRecipeSupplies().clear();&#10;        recipeInputDto.getIngredients().forEach(recipeSupplyDto -&gt; {&#10;            SupplyEntity supplyEntity = supplyRepository&#10;                    .findById(recipeSupplyDto.getSupplyId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Supply not found&quot;));&#10;            RecipeSupply recipeSupply = new RecipeSupply();&#10;            recipeSupply.setRecipe(recipe);&#10;            recipeSupply.setSupply(supplyEntity);&#10;            recipeSupply.setQuantity(recipeSupplyDto.getQuantity());&#10;            recipe.getRecipeSupplies().add(recipeSupply);&#10;        });&#10;&#10;        // Limpiar y actualizar sub-recetas&#10;        recipe.getRecipeRecipeRelations().clear();&#10;        recipeInputDto.getRecipes().forEach(recipeRecipeDto -&gt; {&#10;            Recipe subRecipe = recipeRepository&#10;                    .findById(recipeRecipeDto.getRecipeId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Sub-recipe not found&quot;));&#10;            RecipeRecipeRelationEntity relation = new RecipeRecipeRelationEntity();&#10;            relation.setRecipe(recipe);&#10;            relation.setSubRecipe(subRecipe);&#10;            relation.setQuantity(recipeRecipeDto.getQuantity());&#10;            recipe.getRecipeRecipeRelations().add(relation);&#10;        });&#10;&#10;        recipeRepository.save(recipe);&#10;        return toRecipeDTO(recipe);&#10;    }&#10;&#10;&#10;    public void deleteRecipe(Long id) {&#10;        try {&#10;            recipeRepository.deleteById(id);&#10;        } catch (DataIntegrityViolationException e) {&#10;            throw new CannotDeleteSupplyException(&quot;El insumo está siendo ocupado por algún producto final. Por favor, elimínalos primero.&quot;);&#10;        }&#10;&#10;    }&#10;&#10;    public RecipeOuputDto toRecipeDTO(Recipe recipe) {&#10;        RecipeOuputDto dto = new RecipeOuputDto();&#10;        dto.setId(recipe.getId());&#10;        dto.setName(recipe.getName());&#10;        dto.setQuantity(recipe.getQuantity());&#10;        dto.setUnit(recipe.getUnit());&#10;        dto.setCostRecipe(recipe.cost());&#10;        dto.setImageUrl(recipe.getImageUrl());&#10;        dto.setDescription(recipe.getDescription());&#10;        dto.setRecipeCategory(recipe.getCategory());&#10;&#10;        // Transformar recipeSupplies&#10;        Set&lt;SupplyDto&gt; supplies = recipe.getRecipeSupplies().stream()&#10;                .map(supply -&gt; {&#10;                    SupplyDto supplyDTO = new SupplyDto();&#10;                    supplyDTO.setName(supply.getSupply().getName());&#10;                    supplyDTO.setId(supply.getSupply().getId());&#10;                    supplyDTO.setQuantity(supply.getQuantity());&#10;                    supplyDTO.setPrice(supply.cost());&#10;                    supplyDTO.setUnit(supply.getSupply().getUnit());&#10;                    return supplyDTO;&#10;                })&#10;                .collect(Collectors.toSet());&#10;        dto.setSupplies(supplies);&#10;&#10;&#10;        Set&lt;SubRecipeOutputDto&gt; subRecipeOutputDtos = recipe.getRecipeRecipeRelations().stream()&#10;                .map(subRecipe -&gt; {&#10;                    SubRecipeOutputDto recipeOutputDto = new SubRecipeOutputDto();&#10;                    recipeOutputDto.setName(subRecipe.getSubRecipe().getName());&#10;                    recipeOutputDto.setId(subRecipe.getSubRecipe().getId());&#10;                    recipeOutputDto.setQuantity(subRecipe.getQuantity());&#10;                    recipeOutputDto.setCost(subRecipe.cost());&#10;                    recipeOutputDto.setUnit(subRecipe.getSubRecipe().getUnit());&#10;                    return recipeOutputDto;&#10;                })&#10;                .collect(Collectors.toSet());&#10;        dto.setRecipes(subRecipeOutputDtos);&#10;&#10;        return dto;&#10;    }&#10;&#10;&#10;    public RecipeOuputDto toRecipeDTOBasic(Recipe recipe) {&#10;        RecipeOuputDto dto = new RecipeOuputDto();&#10;        dto.setId(recipe.getId());&#10;        dto.setName(recipe.getName());&#10;        dto.setQuantity(recipe.getQuantity());&#10;        dto.setUnit(recipe.getUnit());&#10;        //dto.setCostRecipe(recipe.cost());&#10;        dto.setImageUrl(recipe.getImageUrl());&#10;        dto.setDescription(recipe.getDescription());&#10;        dto.setRecipeCategory(recipe.getCategory());&#10;&#10;        return dto;&#10;    }&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>